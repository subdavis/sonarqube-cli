{
  "openapi": "3.1.0",
  "info": {
    "title": "SonarQube Web API v2",
    "description": "The SonarQube API v2 is a REST API which enables you to interact with SonarQube programmatically.\nWhile not all endpoints of the former Web API are available yet, the ones available are stable and can be used in production environments.\n",
    "version": "2025.5.0.113060"
  },
  "servers": [
    {
      "url": "http://next.sonarqube.com/sonarqube/api/v2",
      "description": "Generated server url"
    }
  ],
  "paths": {
    "/users-management/users": {
      "get": {
        "tags": ["default-user-controller"],
        "summary": "Users search",
        "description": "  Get a list of users. By default, only active users are returned.\n  The following fields are only returned when user has Administer System permission or for logged-in in user :\n    'email',\n    'externalIdentity',\n    'externalProvider',\n    'groups',\n    'lastConnectionDate',\n    'sonarLintLastConnectionDate',\n    'tokensCount'.\n  Field 'sonarqubeLastConnectionDate' is only updated every hour, so it may not be accurate, for instance when a user authenticates many times in less than one hour.\n  The results are sorted alphabetically by login.\n",
        "operationId": "search",
        "parameters": [
          {
            "name": "active",
            "in": "query",
            "description": "Return active/inactive users",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true,
              "description": "Return active/inactive users"
            }
          },
          {
            "name": "managed",
            "in": "query",
            "description": "Return managed or non-managed users. Only available for managed instances, throws for non-managed instances",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Return managed or non-managed users. Only available for managed instances, throws for non-managed instances"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter on login, name and email.\nThis parameter performs a partial match (contains), it is case insensitive.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Filter on login, name and email.\nThis parameter performs a partial match (contains), it is case insensitive."
            }
          },
          {
            "name": "externalIdentity",
            "in": "query",
            "description": "Filter on externalIdentity.\nThis parameter perform a case-sensitive exact match",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Filter on externalIdentity.\nThis parameter perform a case-sensitive exact match"
            }
          },
          {
            "name": "sonarQubeLastConnectionDateFrom",
            "in": "query",
            "description": "Filter users based on the last connection date field. Only users who interacted with this instance at or after the date will be returned. The format must be ISO 8601 datetime format (YYYY-MM-DDThh:mm:ss±hhmm)",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Filter users based on the last connection date field. Only users who interacted with this instance at or after the date will be returned. The format must be ISO 8601 datetime format (YYYY-MM-DDThh:mm:ss±hhmm)",
              "example": "2020-01-01T00:00:00+0100"
            },
            "example": "2020-01-01T00:00:00+0100"
          },
          {
            "name": "sonarQubeLastConnectionDateTo",
            "in": "query",
            "description": "Filter users based on the last connection date field. Only users that never connected or who interacted with this instance at or before the date will be returned. The format must be ISO 8601 datetime format (YYYY-MM-DDThh:mm:ss±hhmm)",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Filter users based on the last connection date field. Only users that never connected or who interacted with this instance at or before the date will be returned. The format must be ISO 8601 datetime format (YYYY-MM-DDThh:mm:ss±hhmm)",
              "example": "2020-01-01T00:00:00+0100"
            },
            "example": "2020-01-01T00:00:00+0100"
          },
          {
            "name": "sonarLintLastConnectionDateFrom",
            "in": "query",
            "description": "Filter users based on the SonarLint last connection date field Only users who interacted with this instance using SonarLint at or after the date will be returned. The format must be ISO 8601 datetime format (YYYY-MM-DDThh:mm:ss±hhmm)",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Filter users based on the SonarLint last connection date field Only users who interacted with this instance using SonarLint at or after the date will be returned. The format must be ISO 8601 datetime format (YYYY-MM-DDThh:mm:ss±hhmm)",
              "example": "2020-01-01T00:00:00+0100"
            },
            "example": "2020-01-01T00:00:00+0100"
          },
          {
            "name": "sonarLintLastConnectionDateTo",
            "in": "query",
            "description": "Filter users based on the SonarLint last connection date field. Only users that never connected or who interacted with this instance using SonarLint at or before the date will be returned. The format must be ISO 8601 datetime format (YYYY-MM-DDThh:mm:ss±hhmm)",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Filter users based on the SonarLint last connection date field. Only users that never connected or who interacted with this instance using SonarLint at or before the date will be returned. The format must be ISO 8601 datetime format (YYYY-MM-DDThh:mm:ss±hhmm)",
              "example": "2020-01-01T00:00:00+0100"
            },
            "example": "2020-01-01T00:00:00+0100"
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "Filter users belonging to group. Only available for system administrators. Using != operator will exclude users from this group.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Filter users belonging to group. Only available for system administrators. Using != operator will exclude users from this group."
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of results per page. A value of 0 will only return the pagination information.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50,
              "description": "Number of results per page. A value of 0 will only return the pagination information.",
              "maximum": 500,
              "minimum": 0
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "1-based page index",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1,
              "description": "1-based page index",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersSearchRestResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["default-user-controller"],
        "summary": "User creation",
        "description": "  Create a user.\n  If a deactivated user account exists with the given login, it will be reactivated.\n  Requires Administer System permission.\n",
        "operationId": "create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateRestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRestResponseForAdmins"
                }
              }
            }
          }
        }
      }
    },
    "/system/email-configurations": {
      "get": {
        "tags": ["default-email-configuration-controller"],
        "summary": "Search email configurations",
        "description": "  Get the list of email configurations.\n  Note that a single configuration is supported at this time.\n  Requires 'Administer System' permission.\n",
        "operationId": "searchEmailConfigurations",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailConfigurationSearchRestResponse"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      },
      "post": {
        "tags": ["default-email-configuration-controller"],
        "summary": "Create an email configuration",
        "description": "  Create a new email configuration.\n  Note that only a single configuration can exist at a time.\n  Requires 'Administer System' permission.\n",
        "operationId": "createEmailConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailConfigurationCreateRestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailConfigurationResource"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/sca/license-profiles": {
      "get": {
        "tags": ["c"],
        "summary": "List license profiles",
        "description": "  List the license profiles that have been configured for use when evaluating license issues.\n",
        "operationId": "index",
        "parameters": [
          {
            "name": "projectKey",
            "in": "query",
            "description": "If provided, filter to the license profile that is used to analyze the project (if one exists).\n",
            "required": false,
            "schema": {
              "type": "string",
              "description": "If provided, filter to the license profile that is used to analyze the project (if one exists).\n"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseProfileIndexRestResponse"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      },
      "post": {
        "tags": ["c"],
        "summary": "Create new license profile",
        "description": "  Create a new license profile for projects to use when evaluating license issues.\n",
        "operationId": "create_1",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LicenseProfilesCreateRestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseProfileResource"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/sca/issues-releases/update-assignee": {
      "post": {
        "tags": ["e"],
        "summary": "Update the assignee of an (issue,release) pair",
        "description": "Update the assignee of an (issue,release) pair (dependency risk).\n\nThis is an internal API and is subject to change without notice.\n",
        "operationId": "updateAssignee",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAssigneeRestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueReleaseDetailsResource"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/sca/issues-releases/set-severity": {
      "post": {
        "tags": ["e"],
        "summary": "Manually change the severity of an issue-release pair",
        "description": "Change the severity of a (issue,release) pair (dependency risk).\n\nThis is an internal API and is subject to change without notice.\n",
        "operationId": "setSeverity",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueReleaseSetSeverityRestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueReleaseDetailsResource"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/sca/issues-releases/clear-severity-warning": {
      "post": {
        "tags": ["e"],
        "summary": "Dismiss the increased severity warning for an issue-release pair after reviewing the warning",
        "description": "Dismiss the increased severity warning for an (issue,release) pair (dependency risk) after reviewing the warning.\n\nThis is an internal API and is subject to change without notice.\n",
        "operationId": "clearSeverityWarning",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueReleaseClearSeverityWarningRestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueReleaseDetailsResource"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/sca/issues-releases/change-status": {
      "post": {
        "tags": ["e"],
        "summary": "Transition an issue-release pair to a new status",
        "description": "Transition a single (issue,release) pair (dependency risk) to a new status with a comment about why the status is changing.\n\nThis is an internal API and is subject to change without notice.\n",
        "operationId": "transitionIssueRelease",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueReleaseStatusTransitionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueReleaseDetailsResource"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/sca/issues-releases/add-comment": {
      "post": {
        "tags": ["e"],
        "summary": "Add a comment to an issue-release pair",
        "description": "Add a comment to a (issue,release) pair (dependency risk).\n\nThis is an internal API and is subject to change without notice.\n",
        "operationId": "addComment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueReleaseAddCommentRestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/fix-suggestions/feature-enablements/awareness-banner-interactions": {
      "post": {
        "tags": ["feature-enablement-controller"],
        "summary": "Starts a GitLab synchronization run.",
        "operationId": "createAwarenessBannerClicked",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AwarenessBannerClickedRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AwarenessBannerClickedResponse"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/fix-suggestions/ai-suggestions": {
      "post": {
        "tags": ["fix-suggestion-controller"],
        "summary": "Suggest a fix for the given issueId",
        "description": "Requires Code Viewer permission.",
        "operationId": "create_2",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FixSuggestionPostRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FixSuggestionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/entitlements/online-activation": {
      "post": {
        "tags": ["e"],
        "summary": "Sets the license",
        "description": "  Only third party license keys are accepted.\n  Requires 'Administer System' permission.\n",
        "operationId": "setLicense",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LicenseRestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/entitlements/offline-deactivation": {
      "post": {
        "tags": ["$"],
        "summary": "Deactivates offline license",
        "description": "  This method is for users who activated the license using offline method. It should be used to\n  fully deactivate the license (i.e. in cases of migrating the installation to a new server).\n",
        "operationId": "deactivateLicense",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/entitlements/offline-activation": {
      "get": {
        "tags": ["c"],
        "summary": "Retrieve a valid .req file for offline activation",
        "description": "  Retrieves a .req file for offline activation of a license.\n  Requires 'Administer System' permission.\n",
        "operationId": "retrieveRequestFile",
        "parameters": [
          {
            "name": "License-Key",
            "in": "header",
            "description": "The unique license key associated with the license, in the format 'ABCD-EFGH-IJKL-MNOP'. Required in the 'License-Key' HTTP header for offline activation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      },
      "post": {
        "tags": ["c"],
        "summary": "Uploads a license",
        "description": "  The content of the request body should be the text of the license file, along with a valid license key.\n  Requires 'Administer System' permission.\n",
        "operationId": "uploadLicense",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LicenseUploadActivationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/entitlements/legacy-activation": {
      "post": {
        "tags": ["t"],
        "summary": "Sets the license",
        "description": "  Only license keys received from Sonar are accepted.\n  Requires 'Administer System' permission.\n",
        "operationId": "setLegacyLicense",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LegacyLicenseRestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/dop-translation/gitlab-synchronization-runs": {
      "post": {
        "tags": ["gitlab-synchronization-run-controller"],
        "summary": "Starts a GitLab synchronization run.",
        "description": "  Adds a new GitLab synchronization run in the background tasks. Requires sys-admins permissions.\n",
        "operationId": "create_3",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitlabSynchronizationRunResource"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/dop-translation/gitlab-permission-mappings": {
      "get": {
        "tags": ["gitlab-permission-mappings-controller"],
        "summary": "Fetch permissions mapping",
        "description": "Get the list of all the existing roles with their permission mappings. Requires 'Administer System' permission.",
        "operationId": "fetchAll",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionMappingsSearchRestResponse"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      },
      "post": {
        "tags": ["gitlab-permission-mappings-controller"],
        "summary": "Create a permission mapping for a custom role",
        "description": "Requires 'Administer System' permission.",
        "operationId": "createMapping",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionMappingsPostRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionMappingsResource"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/dop-translation/gitlab-configurations": {
      "get": {
        "tags": ["default-gitlab-configuration-controller"],
        "summary": "Search GitLab configs",
        "description": "  Get the list of GitLab configurations.\n  Note that a single configuration is supported at this time.\n  Requires 'Administer System' permission.\n",
        "operationId": "searchGitlabConfiguration",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitlabConfigurationSearchRestResponse"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      },
      "post": {
        "tags": ["default-gitlab-configuration-controller"],
        "summary": "Create Gitlab configuration",
        "description": "  Create a new Gitlab configuration.\n  Note that only a single configuration can exist at a time.\n  Requires 'Administer System' permission.\n",
        "operationId": "create_4",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitlabConfigurationCreateRestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitlabConfigurationResource"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/dop-translation/github-permission-mappings": {
      "get": {
        "tags": ["github-permission-mappings-controller"],
        "summary": "Fetch permissions mapping",
        "description": "Get the list of all the existing roles with their permission mappings. Requires 'Administer System' permission.",
        "operationId": "fetchAll_1",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionMappingsSearchRestResponse"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      },
      "post": {
        "tags": ["github-permission-mappings-controller"],
        "summary": "Create a permission mapping for a custom role",
        "description": "Requires 'Administer System' permission.",
        "operationId": "createMapping_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PermissionMappingsPostRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionMappingsResource"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/dop-translation/github-configurations": {
      "get": {
        "tags": ["default-github-configuration-controller"],
        "summary": "Search GitHub configs",
        "description": "  Get the list of GitHub configurations.\n  Note that a single configuration is supported at this time.\n  Requires 'Administer System' permission.\n",
        "operationId": "searchGithubConfiguration",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GithubConfigurationSearchRestResponse"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      },
      "post": {
        "tags": ["default-github-configuration-controller"],
        "summary": "Create GitHub configuration",
        "description": "  Create a new GitHub configuration.\n  Note that only a single configuration can exist at a time.\n  Requires 'Administer System' permission.\n",
        "operationId": "createGithubConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GithubConfigurationCreateRestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GithubConfigurationResource"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/dop-translation/bound-projects": {
      "post": {
        "tags": ["default-bound-projects-controller"],
        "summary": "Create a SonarQube project with the information from the provided DevOps platform project.",
        "description": "Create a SonarQube project with the information from the provided DevOps platform project.\nAutoconfigure Pull-Request decoration mechanism.\nRequires the 'Create Projects' permission and setting a Personal Access Token with api/alm_integrations/set_pat for a user who will be using this endpoint\n",
        "operationId": "createBoundProject",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BoundProjectCreateRestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BoundProjectCreateRestResponse"
                }
              }
            }
          }
        }
      }
    },
    "/clean-code-policy/rules": {
      "post": {
        "tags": ["default-rule-controller"],
        "summary": "Custom rule creation",
        "description": "  Create a custom rule.\n  Requires the 'Administer Quality Profiles' permission.\n",
        "operationId": "create_5",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RuleCreateRestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuleRestResponse"
                }
              }
            }
          }
        }
      }
    },
    "/authorizations/groups": {
      "get": {
        "tags": ["default-group-controller"],
        "summary": "Group search",
        "description": "  Get the list of groups.\n  The results are sorted alphabetically by group name.\n",
        "operationId": "search_1",
        "parameters": [
          {
            "name": "managed",
            "in": "query",
            "description": "Return managed or non-managed groups. Only available for managed instances, throws for non-managed instances",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Return managed or non-managed groups. Only available for managed instances, throws for non-managed instances"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter on name.\nThis parameter performs a partial match (contains), it is case insensitive.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Filter on name.\nThis parameter performs a partial match (contains), it is case insensitive."
            }
          },
          {
            "name": "userId",
            "in": "query",
            "description": "Filter groups containing the user. Only available for system administrators. Using != operator will search for groups without the user.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Filter groups containing the user. Only available for system administrators. Using != operator will search for groups without the user."
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of results per page. A value of 0 will only return the pagination information.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50,
              "description": "Number of results per page. A value of 0 will only return the pagination information.",
              "maximum": 500,
              "minimum": 0
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "1-based page index",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1,
              "description": "1-based page index",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupsSearchRestResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["default-group-controller"],
        "summary": "Create a new group",
        "description": "Create a new group.",
        "operationId": "create_6",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupCreateRestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupRestResponse"
                }
              }
            }
          }
        }
      }
    },
    "/authorizations/group-memberships": {
      "get": {
        "tags": ["default-group-membership-controller"],
        "summary": "Search across group memberships",
        "description": "  Get the list of groups and members matching the query.\n",
        "operationId": "search_2",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "ID of the user for which to search groups. If not set, all groups are returned.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "ID of the user for which to search groups. If not set, all groups are returned."
            }
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "ID of the group for which to search members. If not set, all groups are returned.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "ID of the group for which to search members. If not set, all groups are returned."
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of results per page. A value of 0 will only return the pagination information.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50,
              "description": "Number of results per page. A value of 0 will only return the pagination information.",
              "maximum": 500,
              "minimum": 0
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "1-based page index",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1,
              "description": "1-based page index",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupsMembershipSearchRestResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["default-group-membership-controller"],
        "summary": "Add a group membership",
        "description": "Add a user to a group.",
        "operationId": "create_7",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupMembershipCreateRestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupMembershipRestResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users-management/users/{id}": {
      "get": {
        "tags": ["default-user-controller"],
        "summary": "Fetch a single user",
        "description": "Fetch a single user.\nThe following fields are only returned when user has Administer System permission or for logged-in in user :\n    'email'\n    'externalIdentity'\n    'externalProvider'\n    'groups'\n    'lastConnectionDate'\n    'sonarLintLastConnectionDate'\n    'tokensCount'\n  Field 'sonarqubeLastConnectionDate' is only updated every hour, so it may not be accurate, for instance when a user authenticates many times in less than one hour.\n",
        "operationId": "fetchUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the user to fetch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRestResponseForAdmins"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["default-user-controller"],
        "summary": "Deactivate a user",
        "description": "Deactivates a user. Requires Administer System permission.",
        "operationId": "deactivate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "anonymize",
            "in": "query",
            "description": "Anonymize user in addition to deactivating it.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "patch": {
        "tags": ["default-user-controller"],
        "summary": "Update a user",
        "description": "Update users attributes.\n",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/merge-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateRestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRestResponseForAdmins"
                }
              }
            }
          }
        }
      }
    },
    "/system/email-configurations/{id}": {
      "get": {
        "tags": ["default-email-configuration-controller"],
        "summary": "Fetch an email configuration",
        "description": "Fetch a Email configuration. Requires 'Administer System' permission.\n",
        "operationId": "getEmailConfiguration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the configuration to fetch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailConfigurationResource"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      },
      "delete": {
        "tags": ["default-email-configuration-controller"],
        "summary": "Delete an email configuration",
        "description": "Delete an email configuration.\nRequires 'Administer System' permission.\n",
        "operationId": "deleteEmailConfiguration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the configuration to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-sonar-internal": "true"
      },
      "patch": {
        "tags": ["default-email-configuration-controller"],
        "summary": "Update an email configuration",
        "description": "Update an email configuration. Requires 'Administer System' permission.\n",
        "operationId": "updateEmailConfiguration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/merge-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/EmailConfigurationUpdateRestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailConfigurationResource"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/sca/license-profiles/{license-profile-key}": {
      "get": {
        "tags": ["c"],
        "summary": "Get the license policy for a given profile",
        "description": "Get the license policy for a given profile.\n",
        "operationId": "get",
        "parameters": [
          {
            "name": "license-profile-key",
            "in": "path",
            "description": "The license profile key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseProfileDetailsResource"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      },
      "delete": {
        "tags": ["c"],
        "summary": "Delete the license profile",
        "description": "Delete the license profile.",
        "operationId": "delete",
        "parameters": [
          {
            "name": "license-profile-key",
            "in": "path",
            "description": "The id of the license profile",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-sonar-internal": "true"
      },
      "patch": {
        "tags": ["c"],
        "summary": "Update the license profile",
        "description": "  Update the license profile for projects to use when evaluating license issues.\n",
        "operationId": "update",
        "parameters": [
          {
            "name": "license-profile-key",
            "in": "path",
            "description": "The id of the license profile",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LicenseProfilesUpdateRestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseProfileResource"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/sca/license-profiles/{license-profile-key}/licenses/{license-policy-id}": {
      "patch": {
        "tags": ["c"],
        "summary": "Update the policy for a single license",
        "description": "  Update the policy for a single license in the license profile.\n",
        "operationId": "patchLicense",
        "parameters": [
          {
            "name": "license-profile-key",
            "in": "path",
            "description": "The license profile key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "license-policy-id",
            "in": "path",
            "description": "The license ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LicensePolicyLicenseUpdateRestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicensePolicyLicenseResource"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/sca/license-profiles/{license-profile-key}/categories/{category-key}": {
      "patch": {
        "tags": ["c"],
        "summary": "Update the policy for a license category",
        "description": "  Update the policy for an entire category in the license profile.\n",
        "operationId": "patchCategory",
        "parameters": [
          {
            "name": "license-profile-key",
            "in": "path",
            "description": "The license profile key.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "category-key",
            "in": "path",
            "description": "The category key.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "UNKNOWN",
                "COPYLEFT_WEAK",
                "COPYLEFT_STRONG",
                "COPYLEFT_NETWORK",
                "COPYLEFT_MAXIMAL",
                "PERMISSIVE_STANDARD",
                "PERMISSIVE_AMATEUR"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LicenseProfileCategoryUpdateRestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseProfileCategoryResource"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/sca/license-profiles/assigned-projects": {
      "patch": {
        "tags": ["$"],
        "summary": "Assign project to license profile",
        "description": "  Configure which license profile should be used when analyzing a project for license issues.\n",
        "operationId": "update_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignedProjectsUpdateRestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The project was previously assigned to a license profile. The provided project has been assigned to the license profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseProfileResource"
                }
              }
            }
          },
          "201": {
            "description": "The project was not previously assigned to a license profile. The provided project has been assigned to the license profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseProfileResource"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/sca/issues-releases/{key}/changelog": {
      "get": {
        "tags": ["e"],
        "summary": "Get the changelog for a single issue-release pair",
        "description": "Get the changelog for a single (issue,release) pair (dependency risk), using the key from the search endpoint.\n\nThis is an internal API and is subject to change without notice.\n",
        "operationId": "getChangelog",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The key of the (issue,release) pair.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssuesReleasesChangesRestResponse"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      },
      "delete": {
        "tags": ["e"],
        "summary": "Delete a comment from an issue-release pair",
        "description": "Delete a comment from a (issue,release) pair (dependency risk).\n\nThis is an internal API and is subject to change without notice.\n",
        "operationId": "deleteComment",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The key of the (issue,release) pair.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "issueReleaseChangeKey",
            "in": "query",
            "description": "Issue release change key",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Issue release change key"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "x-sonar-internal": "true"
      },
      "patch": {
        "tags": ["e"],
        "summary": "Update a comment on an issue-release pair",
        "description": "Update a comment on a (issue,release) pair (dependency risk).\n\nThis is an internal API and is subject to change without notice.\n",
        "operationId": "updateComment",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The key of the (issue,release) pair.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueReleaseUpdateCommentRestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/sca/feature-enablements": {
      "get": {
        "tags": ["e"],
        "summary": "Get the status of SCA enablement",
        "operationId": "getFeatureEnablement",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureEnablementResource"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      },
      "patch": {
        "tags": ["e"],
        "summary": "Update SCA enablement settings",
        "operationId": "updateFeatureEnablement",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeatureEnablementRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureEnablementResource"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/fix-suggestions/feature-enablements": {
      "get": {
        "tags": ["feature-enablement-controller"],
        "summary": "Fetch the Ai CodeFix feature enablement configurations",
        "operationId": "getFeatureEnablement_1",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureEnablementResponse"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      },
      "patch": {
        "tags": ["feature-enablement-controller"],
        "summary": "Enable/Disable the AI CodeFix feature at the instance or project level",
        "operationId": "updateFeatureEnablement_1",
        "requestBody": {
          "content": {
            "application/merge-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/FeatureEnablementRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/entitlements/license": {
      "get": {
        "tags": ["m"],
        "summary": "Returns information about the license",
        "description": "  Returns information about the current license.\n  Requires 'Administer System' permission.\n",
        "operationId": "getLicense",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRestResponse"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      },
      "delete": {
        "tags": ["m"],
        "summary": "Deletes the existing license",
        "description": "  Deletes the license. Both license keys received from Sonar and from 3rd party system can be removed.\n  Requires 'Administer System' permission.\n",
        "operationId": "deleteLicense",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "x-sonar-internal": "true"
      },
      "patch": {
        "tags": ["m"],
        "summary": "Refreshes the existing license",
        "description": "  Fetches the latest information about the license and updates it on the SonarQube Server instance.\n  Requires 'Administer System' permission.\n",
        "operationId": "refreshLicense",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/dop-translation/gitlab-permission-mappings/{role}": {
      "delete": {
        "tags": ["gitlab-permission-mappings-controller"],
        "summary": "Delete a single permission mappings",
        "description": "Requires 'Administer System' permission.",
        "operationId": "deleteMapping",
        "parameters": [
          {
            "name": "role",
            "in": "path",
            "description": "The name of the role to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-sonar-internal": "true"
      },
      "patch": {
        "tags": ["gitlab-permission-mappings-controller"],
        "summary": "Update a single permission mapping",
        "description": "Requires 'Administer System' permission.",
        "operationId": "updateMapping",
        "parameters": [
          {
            "name": "role",
            "in": "path",
            "description": "The name of the role to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/merge-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DevOpsPermissionMappingUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionMappingsResource"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/dop-translation/gitlab-configurations/{id}": {
      "get": {
        "tags": ["default-gitlab-configuration-controller"],
        "summary": "Fetch a GitLab configuration",
        "description": "Fetch a GitLab configuration. Requires 'Administer System' permission.\n",
        "operationId": "getGitlabConfiguration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the configuration to fetch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitlabConfigurationResource"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      },
      "delete": {
        "tags": ["default-gitlab-configuration-controller"],
        "summary": "Delete a GitLab configuration",
        "description": "Delete a GitLab configuration.\nRequires 'Administer System' permission.\n",
        "operationId": "deleteGitlabConfiguration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the configuration to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-sonar-internal": "true"
      },
      "patch": {
        "tags": ["default-gitlab-configuration-controller"],
        "summary": "Update a Gitlab configuration",
        "description": "Update a Gitlab configuration. Requires 'Administer System' permission.\n",
        "operationId": "updateGitlabConfiguration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/merge-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GitlabConfigurationUpdateRestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitlabConfigurationResource"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/dop-translation/github-permission-mappings/{role}": {
      "delete": {
        "tags": ["github-permission-mappings-controller"],
        "summary": "Delete a single permission mappings",
        "description": "Requires 'Administer System' permission.",
        "operationId": "deleteMapping_1",
        "parameters": [
          {
            "name": "role",
            "in": "path",
            "description": "The name of the role to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-sonar-internal": "true"
      },
      "patch": {
        "tags": ["github-permission-mappings-controller"],
        "summary": "Update a single permission mapping",
        "description": "Requires 'Administer System' permission.",
        "operationId": "updateMapping_1",
        "parameters": [
          {
            "name": "role",
            "in": "path",
            "description": "The name of the role to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/merge-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DevOpsPermissionMappingUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionMappingsResource"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/dop-translation/github-configurations/{id}": {
      "get": {
        "tags": ["default-github-configuration-controller"],
        "summary": "Fetch a GitHub configuration",
        "description": "Fetch a GitHub configuration. Requires 'Administer System' permission.\n",
        "operationId": "getGithubConfiguration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the configuration to fetch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GithubConfigurationResource"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      },
      "delete": {
        "tags": ["default-github-configuration-controller"],
        "summary": "Delete a GitHub configuration",
        "description": "Delete a GitHub configuration.\nRequires 'Administer System' permission.\n",
        "operationId": "deleteGithubConfiguration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the configuration to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-sonar-internal": "true"
      },
      "patch": {
        "tags": ["default-github-configuration-controller"],
        "summary": "Update a GitHub configuration",
        "description": "Update a GitHub configuration. Requires 'Administer System' permission.\n",
        "operationId": "updateGithubConfiguration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/merge-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GithubConfigurationUpdateRestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GithubConfigurationResource"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/clean-code-policy/mode": {
      "get": {
        "tags": ["default-mode-controller"],
        "summary": "Retrieve current instance Mode",
        "description": "Fetch the current instance mode. Can be Multi-Quality Rules (MQR) Mode or Standard Experience.\n",
        "operationId": "getMode",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModeResource"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      },
      "patch": {
        "tags": ["default-mode-controller"],
        "summary": "Update current instance Mode",
        "description": "Update the current instance mode. Can be Multi-Quality Rules (MQR) Mode or Standard Experience.\nRequires 'Administer System' permission.\n",
        "operationId": "patchMode",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModeResource"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModeResource"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/authorizations/groups/{id}": {
      "get": {
        "tags": ["default-group-controller"],
        "summary": "Fetch a single group",
        "description": "Fetch a single group.",
        "operationId": "fetchGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the group to fetch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupRestResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["default-group-controller"],
        "summary": "Deletes a group",
        "description": "Deletes a group.",
        "operationId": "deleteGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the group to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "patch": {
        "tags": ["default-group-controller"],
        "summary": "Update a group",
        "description": "Update a group name or description.\n",
        "operationId": "updateGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/merge-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GroupUpdateRestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupRestResponse"
                }
              }
            }
          }
        }
      }
    },
    "/system/migrations-status": {
      "get": {
        "tags": ["database-migrations-controller"],
        "summary": "Gets the status of ongoing database migrations, if any",
        "description": "Return the detailed status of ongoing database migrations including starting date. If no migration is ongoing or needed it is still possible to call this endpoint and receive appropriate information.",
        "operationId": "getStatus",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatabaseMigrationsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/system/liveness": {
      "get": {
        "tags": ["default-liveness-controller"],
        "summary": "Provide liveness of SonarQube, meant to be used as a liveness probe on Kubernetes",
        "description": "  Require 'Administer System' permission or authentication with passcode.\n\n  When SonarQube is fully started, liveness check for database connectivity, Compute Engine status, and, except for DataCenter Edition, if ElasticSearch is Green or Yellow.\n\n  When SonarQube is on Safe Mode (for example when a database migration is running), liveness check only for database connectivity\n",
        "operationId": "livenessCheck",
        "parameters": [
          {
            "name": "X-Sonar-Passcode",
            "in": "header",
            "description": "Passcode can be provided, see SonarQube documentation",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "This SonarQube node is alive"
          },
          "default": {
            "description": "This SonarQube node is not alive and should be rescheduled"
          }
        }
      }
    },
    "/system/health": {
      "get": {
        "tags": ["health-controller"],
        "operationId": "getHealth",
        "parameters": [
          {
            "name": "X-Sonar-Passcode",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Health"
                }
              }
            }
          }
        }
      }
    },
    "/sca/self-test": {
      "get": {
        "tags": ["e"],
        "summary": "Run a self test",
        "description": "Run a self test that the dependency analysis (SCA) feature is enabled and\nable to reach the cloud services it relies on.\n\nThis is an internal API and is subject to change without notice.\n",
        "operationId": "performSelfTest",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelfTestResponse"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/sca/self-test/spring-configuration": {
      "get": {
        "tags": ["e"],
        "summary": "Run a self test that Spring is configured as expected",
        "description": "Run a self test that Spring is set up and working as we expect.\n\nThis is an internal API and is subject to change without notice.\n",
        "operationId": "performSpringConfigurationSelfTest",
        "parameters": [
          {
            "name": "selfTestName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelfTestSpringConfigurationResponse"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/sca/sbom-reports": {
      "get": {
        "tags": ["e"],
        "summary": "Get a software bill of materials (SBOM) report",
        "description": "Return a report based on the dependencies in this component's branch, using\nthe type parameter and Accept header to select the report to generate.\n\nRight now, the available reports have specialized MIME types that\ngo along with those formats:\n\n* CycloneDX: https://cyclonedx.org/specification/overview/\n  * JSON & XML\n* SPDX 2.3: https://spdx.github.io/spdx-spec/v2.3/\n  * JSON & XML\n",
        "operationId": "generateReport",
        "parameters": [
          {
            "name": "component",
            "in": "query",
            "description": "Key of the component (project, application, portfolio) to build report for",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Key of the component (project, application, portfolio) to build report for"
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Key of the branch to build report for",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Key of the branch to build report for"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of report to generate.\nThe `Accept` header sent by the client determines the format of the report.\nCurrently supported: cyclonedx (application/vnd.cyclonedx+json), cyclonedx (application/vnd.cyclonedx+xml),\nspdx_23 (application/spdx+json), spdx_23 (application/spdx+xml)\n",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Type of report to generate.\nThe `Accept` header sent by the client determines the format of the report.\nCurrently supported: cyclonedx (application/vnd.cyclonedx+json), cyclonedx (application/vnd.cyclonedx+xml),\nspdx_23 (application/spdx+json), spdx_23 (application/spdx+xml)\n",
              "enum": ["cyclonedx", "spdx_23"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The desired report in the desired output format",
            "content": {
              "application/vnd.cyclonedx+json": {
                "schema": {
                  "type": "string"
                }
              },
              "application/vnd.cyclonedx+xml": {
                "schema": {
                  "type": "string"
                }
              },
              "application/spdx+json": {
                "schema": {
                  "type": "string"
                }
              },
              "application/spdx+xml": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/sca/risk-reports": {
      "get": {
        "tags": ["e"],
        "summary": "Get a report for all the current SCA dependency risks for a given component and branch",
        "description": "Returns list of all risks for a given component and branch. CSV format is available by setting `Accept: text/csv` in your request headers.\n",
        "operationId": "getReport",
        "parameters": [
          {
            "name": "component",
            "in": "query",
            "description": "Key of the component (project, application, portfolio) to build report for",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Key of the component (project, application, portfolio) to build report for"
            }
          },
          {
            "name": "branch",
            "in": "query",
            "description": "Key of the branch to build report for",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Key of the branch to build report for"
            }
          },
          {
            "name": "riskType",
            "in": "query",
            "description": "Type of risk to filter the report by. If not provided, all risks types are included.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Type of risk to filter the report by. If not provided, all risks types are included.",
              "enum": ["VULNERABILITY", "PROHIBITED_LICENSE"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The report in the desired output format",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RiskReportItem"
                  }
                }
              },
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/sca/releases": {
      "get": {
        "tags": ["e"],
        "summary": "Search for releases",
        "description": "Search for package releases that appear in the analyzed project,\napplication, or portfolio, as determined by software composition analysis.\n\nThis endpoint returns one result for each release,\nrather than one result for each time a release is pulled in.\nEach result may appear in multiple files or scopes that\nall use the same version of the affected package.\n\nThe search results do not include full details on the dependencies\nthat pull in each release, only a summary. To get the full dependency\ndetails, use the /releases/{key} endpoint for a single release.\n\nIn the terminology of this endpoint, a \"release\" is a version of\na package like \"lodash 1.2.3\", and a \"dependency\" is a specific file\nand scope that pulls in the release such as \"subproject/pom.xml test\".\nEach returned release may have multiple dependencies.\n\nThis is an internal API and is subject to change without notice.\n",
        "operationId": "search_3",
        "parameters": [
          {
            "name": "projectKey",
            "in": "query",
            "description": "Key of the component (project, application, or portfolio) to fetch all dependencies from",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Key of the component (project, application, or portfolio) to fetch all dependencies from"
            }
          },
          {
            "name": "branchKey",
            "in": "query",
            "description": "Key of the branch to fetch all dependencies from. If not provided, the default branch will be used unless a pull request key is provided.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Key of the branch to fetch all dependencies from. If not provided, the default branch will be used unless a pull request key is provided."
            }
          },
          {
            "name": "pullRequestKey",
            "in": "query",
            "description": "Key of the pull request to fetch all dependencies from.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Key of the pull request to fetch all dependencies from."
            }
          },
          {
            "name": "direct",
            "in": "query",
            "description": "Filter on the direct attribute. TRUE stands for direct dependencies, FALSE for transitive dependencies.",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Filter on the direct attribute. TRUE stands for direct dependencies, FALSE for transitive dependencies."
            }
          },
          {
            "name": "newlyIntroduced",
            "in": "query",
            "description": "Filter on the newlyIntroduced attribute. TRUE stands for only releases introduced vs. the target branch, FALSE for releases shared with target.",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Filter on the newlyIntroduced attribute. TRUE stands for only releases introduced vs. the target branch, FALSE for releases shared with target."
            }
          },
          {
            "name": "productionScope",
            "in": "query",
            "description": "Filter on the productionScope attribute. TRUE stands for only production dependencies, FALSE for only not in production. If a release is both, it matches both.",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Filter on the productionScope attribute. TRUE stands for only production dependencies, FALSE for only not in production. If a release is both, it matches both."
            }
          },
          {
            "name": "packageManagers",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "description": "Filter on the package manager",
              "items": {
                "type": "string"
              },
              "uniqueItems": true
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "Filter on the package name. This parameter performs a partial match (contains and case insensitive) on the package name.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Filter on the package name. This parameter performs a partial match (contains and case insensitive) on the package name."
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of results per page. A value of 0 will only return the pagination information.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50,
              "description": "Number of results per page. A value of 0 will only return the pagination information.",
              "maximum": 500,
              "minimum": 0
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "1-based page index",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1,
              "description": "1-based page index",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReleasesSearchRestResponse"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/sca/releases/{key}": {
      "get": {
        "tags": ["e"],
        "summary": "Get a single release",
        "description": "Fetch a single release by its key.\n\nThis single-release endpoint lists full details for all dependencies\nthat mention the release.\n\nIn the terminology of this endpoint, a \"release\" is a version of\na package like \"lodash 1.2.3\", and a \"dependency\" is a specific file\nand scope that pulls in the release such as \"subproject/pom.xml test\".\nEach returned release may have multiple dependencies.\n\nThis is an internal API and is subject to change without notice.\n",
        "operationId": "fetchRelease",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The key of the release to fetch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDetailResource"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/sca/license-profiles/assignable-projects": {
      "get": {
        "tags": ["e"],
        "summary": "License profile assignable projects",
        "description": "  List the projects that can be assigned to the license profile. Assigning the\n  project to a license profile will cause that license profile to be used when\n  analyzing the project for license issues.\n",
        "operationId": "index_1",
        "parameters": [
          {
            "name": "licenseProfileUuid",
            "in": "query",
            "description": "The key of the license profile whose assignable projects should be retrieved.\n",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The key of the license profile whose assignable projects should be retrieved.\n"
            }
          },
          {
            "name": "assignedToLicenseProfile",
            "in": "query",
            "description": "  Providing this parameter filters by whether projects are assigned to the license profile or not.\n  Omitting this parameter includes all projects which can be assigned to the license profile,\n  regardless of whether they are already assigned to the license profile.\n",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "  Providing this parameter filters by whether projects are assigned to the license profile or not.\n  Omitting this parameter includes all projects which can be assigned to the license profile,\n  regardless of whether they are already assigned to the license profile.\n"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "  Providing this parameter performs a partial match (contains and case insensitive) on the project name.\n",
            "required": false,
            "schema": {
              "type": "string",
              "description": "  Providing this parameter performs a partial match (contains and case insensitive) on the project name.\n"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of results per page. A value of 0 will only return the pagination information.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50,
              "description": "Number of results per page. A value of 0 will only return the pagination information.",
              "maximum": 500,
              "minimum": 0
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "1-based page index",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1,
              "description": "1-based page index",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignableProjectsIndexRestResponse"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/sca/issues-releases": {
      "get": {
        "tags": ["e"],
        "summary": "Search for issue-release pairs",
        "description": "Search for software composition analysis issues (dependency risks)\nof a project, paired with releases that appear in the analyzed\nproject, application, or portfolio.\n\nThis endpoint returns one result for each (issue,release) pair,\nrather than one result for each distinct issue. So for example\nif a library uses two different versions of a package and\nboth versions are affected by the same vulnerability, you will\nget two results not one.\n\nHowever each result may appear in multiple files or scopes that\nall use the same version of the affected package.\n\nIn the terminology of this endpoint, a \"release\" is a version of\na package like \"lodash 1.2.3\", an \"issue\" is a problem such as\n\"CVE-1234\", and a \"dependency\" is a specific file and scope that\npulls in the release such as \"subproject/pom.xml test\".\n\nThis is an internal API and is subject to change without notice.\n",
        "operationId": "search_4",
        "parameters": [
          {
            "name": "projectKey",
            "in": "query",
            "description": "Key of the component (project, application, portfolio) to fetch all dependency risks from.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Key of the component (project, application, portfolio) to fetch all dependency risks from."
            }
          },
          {
            "name": "branchKey",
            "in": "query",
            "description": "Key of the branch to fetch all dependency risks from. If not provided, the default branch will be used unless a pull request key is provided.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Key of the branch to fetch all dependency risks from. If not provided, the default branch will be used unless a pull request key is provided."
            }
          },
          {
            "name": "pullRequestKey",
            "in": "query",
            "description": "Key of the pull request to fetch all dependency risks from.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Key of the pull request to fetch all dependency risks from."
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order",
            "required": false,
            "schema": {
              "type": "string",
              "default": "+identity",
              "description": "Sort order",
              "enum": [
                "+identity",
                "-identity",
                "+severity",
                "-severity",
                "+cvssScore",
                "-cvssScore"
              ]
            }
          },
          {
            "name": "packageManagers",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "description": "Filter on the package manager",
              "items": {
                "type": "string"
              },
              "uniqueItems": true
            }
          },
          {
            "name": "types",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "description": "Filter on the issue type",
              "items": {
                "type": "string"
              },
              "uniqueItems": true
            }
          },
          {
            "name": "qualities",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "description": "Filter on the quality domain",
              "items": {
                "type": "string"
              },
              "uniqueItems": true
            }
          },
          {
            "name": "severities",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "description": "Filter on the severity",
              "items": {
                "type": "string"
              },
              "uniqueItems": true
            }
          },
          {
            "name": "statuses",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "description": "Filter on the status",
              "items": {
                "type": "string"
              },
              "uniqueItems": true
            }
          },
          {
            "name": "packageName",
            "in": "query",
            "description": "Filter on the package name. This parameter performs a partial match (contains and case insensitive) on the package name.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Filter on the package name. This parameter performs a partial match (contains and case insensitive) on the package name."
            }
          },
          {
            "name": "vulnerabilityId",
            "in": "query",
            "description": "Filter on the vulnerability ID. This parameter performs a partial match (contains and case insensitive) on the vulnerability ID.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Filter on the vulnerability ID. This parameter performs a partial match (contains and case insensitive) on the vulnerability ID."
            }
          },
          {
            "name": "newlyIntroduced",
            "in": "query",
            "description": "Filter on the isNew attribute. TRUE stands for only releases introduced vs. the target branch, FALSE for releases shared with target.",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Filter on the isNew attribute. TRUE stands for only releases introduced vs. the target branch, FALSE for releases shared with target."
            }
          },
          {
            "name": "direct",
            "in": "query",
            "description": "Filter on the direct attribute. TRUE stands for only direct dependencies, FALSE for only transitive. If a release is both, it matches both.",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Filter on the direct attribute. TRUE stands for only direct dependencies, FALSE for only transitive. If a release is both, it matches both."
            }
          },
          {
            "name": "productionScope",
            "in": "query",
            "description": "Filter on the productionScope attribute. TRUE stands for only production dependencies, FALSE for only not in production. If a release is both, it matches both.",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Filter on the productionScope attribute. TRUE stands for only production dependencies, FALSE for only not in production. If a release is both, it matches both."
            }
          },
          {
            "name": "assignees",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "description": "Filter on assignee logins.",
              "items": {
                "type": "string"
              },
              "uniqueItems": true
            }
          },
          {
            "name": "projects",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "description": "Filter on project keys.",
              "items": {
                "type": "string"
              },
              "uniqueItems": true
            }
          },
          {
            "name": "assigned",
            "in": "query",
            "description": "Filter on whether the issue is assigned or not.",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Filter on whether the issue is assigned or not."
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of results per page. A value of 0 will only return the pagination information.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50,
              "description": "Number of results per page. A value of 0 will only return the pagination information.",
              "maximum": 500,
              "minimum": 0
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "1-based page index",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1,
              "description": "1-based page index",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssuesReleasesSearchRestResponse"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/sca/issues-releases/{key}": {
      "get": {
        "tags": ["e"],
        "summary": "Get a single issue-release pair",
        "description": "Fetch a single (issue,release) pair (dependency risk), using the key from the search endpoint.\n\nThis is an internal API and is subject to change without notice.\n",
        "operationId": "fetchIssueRelease",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "The key of the issue,release pair to fetch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssueReleaseDetailsResource"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/sca/issues-releases/all-assignees": {
      "get": {
        "tags": ["e"],
        "summary": "Get the list of users assigned to at least one issue in a given branch",
        "description": "Get the list of users assigned to at least one issue in a given branch.\n",
        "operationId": "getAllAssignees",
        "parameters": [
          {
            "name": "projectKey",
            "in": "query",
            "description": "Key of the project to fetch all assignee users from.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Key of the project to fetch all assignee users from."
            }
          },
          {
            "name": "branchKey",
            "in": "query",
            "description": "Key of the branch to fetch all assignee users from. If not provided, the default branch will be used unless a pull request key is provided.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Key of the branch to fetch all assignee users from. If not provided, the default branch will be used unless a pull request key is provided."
            }
          },
          {
            "name": "pullRequestKey",
            "in": "query",
            "description": "Key of the pull request to fetch all assignee users from.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Key of the pull request to fetch all assignee users from."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserResource"
                  }
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/sca/enabled": {
      "get": {
        "tags": ["c"],
        "summary": "Get whether SCA is licensed and set up for a resource's organization or enterprise",
        "operationId": "getFeatureEnabled",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScaFeatureEnabledResource"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/sca/feature-enabled": {
      "get": {
        "tags": ["c"],
        "summary": "Get whether SCA is licensed and set up for a resource's organization or enterprise",
        "operationId": "getFeatureEnabled_1",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScaFeatureEnabledResource"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/sca/clis": {
      "get": {
        "tags": ["e"],
        "summary": "Get available CLI downloads",
        "description": "Gets the available SCA CLI downloads. The response includes metadata about each option\nsuch as the filename and operating system.\n\nThis is an internal API and is subject to change without notice.\n",
        "operationId": "getScaClisMetadata",
        "parameters": [
          {
            "name": "os",
            "in": "query",
            "description": "Filter by operating system",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Filter by operating system",
              "enum": ["windows", "linux", "macos"],
              "example": "windows"
            },
            "example": "windows"
          },
          {
            "name": "arch",
            "in": "query",
            "description": "Filter by CPU architecture",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Filter by CPU architecture",
              "enum": ["x64", "aarch64"],
              "example": "x64"
            },
            "example": "x64"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScaCliInfoRestResponse"
                  }
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/sca/clis/{id}": {
      "get": {
        "tags": ["e"],
        "summary": "Get metadata for a specific CLI download",
        "description": "Gets the metadata for a specific SCA CLI download. The response includes the\nfilename, SHA-256 checksum, operating system, and CPU architecture.\n\nThis is an internal API and is subject to change without notice.\n",
        "operationId": "downloadScaCli",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the SCA CLI download",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ScaCliInfoRestResponse"
                    },
                    {
                      "type": "string",
                      "format": "binary"
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ScaCliInfoRestResponse"
                    },
                    {
                      "type": "string",
                      "format": "binary"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/sca/analyses": {
      "get": {
        "tags": ["e"],
        "summary": "Fetch analysis status for one branch",
        "description": "Fetch analysis status information for a branch. If the branch has\nnever been analyzed, will return a status of 404.\n\nThis is an internal API and is subject to change without notice.\n",
        "operationId": "fetchAnalysis",
        "parameters": [
          {
            "name": "projectKey",
            "in": "query",
            "description": "Key of the project to fetch analysis status from",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Key of the project to fetch analysis status from"
            }
          },
          {
            "name": "branchKey",
            "in": "query",
            "description": "Key of the branch to fetch analysis status from. If not provided, the default branch will be used unless a pull request key is provided.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Key of the branch to fetch analysis status from. If not provided, the default branch will be used unless a pull request key is provided."
            }
          },
          {
            "name": "pullRequestKey",
            "in": "query",
            "description": "Key of the pull request to fetch analysis status from.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Key of the pull request to fetch analysis status from."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnalysisResource"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/fix-suggestions/supported-rules": {
      "get": {
        "tags": ["supported-rules-controller"],
        "summary": "Get the supported rules",
        "description": "Returns the list of rules for which a fix suggestion can be generated",
        "operationId": "supportedRules",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupportedRulesDto"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/fix-suggestions/supported-llm-providers": {
      "get": {
        "tags": ["supported-llm-provider-controller"],
        "summary": "Get the supported LLM providers",
        "description": "Returns the LLM providers that could be used for requesting an AI fix suggestion",
        "operationId": "getLlmProviders",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LlmProviderResponseDto"
                  }
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/fix-suggestions/service-info": {
      "get": {
        "tags": ["service-info-controller"],
        "summary": "Request status of AI CodeFix service",
        "operationId": "get_1",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceInfo"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/fix-suggestions/issues/{issueId}": {
      "get": {
        "tags": ["fix-suggestion-issue-controller"],
        "summary": "Fetch AI suggestion availability for the given issueId",
        "description": "Requires Code Viewer permission.",
        "operationId": "get_2",
        "parameters": [
          {
            "name": "issueId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FixSuggestionIssueResponse"
                }
              }
            }
          }
        }
      }
    },
    "/entitlements/purchasable-features": {
      "get": {
        "tags": ["p"],
        "summary": "Returns a list of all available purchasable features for this edition",
        "description": "  Returns a list of all available purchasable features for this edition including the ones who are already purchased\n",
        "operationId": "getPurchasableFeatures",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PurchasableFeatureRestResponse"
                  }
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/dop-translation/project-bindings": {
      "get": {
        "tags": ["default-project-bindings-controller"],
        "summary": "Search across project bindings",
        "operationId": "getProjectBindingByProjectId",
        "parameters": [
          {
            "name": "repository",
            "in": "query",
            "description": "Filter on the repository name.\nThis parameter performs an exact, case insensitive, match.\n",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Filter on the repository name.\nThis parameter performs an exact, case insensitive, match.\n"
            }
          },
          {
            "name": "dopSettingId",
            "in": "query",
            "description": "Filter on the DevOps Platform setting id.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Filter on the DevOps Platform setting id."
            }
          },
          {
            "name": "repositoryUrl",
            "in": "query",
            "description": "Filter on the repository URL.\nThis parameter can be in different formats, the traditional URL or the git remote URL (https or ssh).\n",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Filter on the repository URL.\nThis parameter can be in different formats, the traditional URL or the git remote URL (https or ssh).\n"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of results per page. A value of 0 will only return the pagination information.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50,
              "description": "Number of results per page. A value of 0 will only return the pagination information.",
              "maximum": 500,
              "minimum": 0
            }
          },
          {
            "name": "pageIndex",
            "in": "query",
            "description": "1-based page index",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1,
              "description": "1-based page index",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectBindingsSearchRestResponse"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/dop-translation/project-bindings/{id}": {
      "get": {
        "tags": ["default-project-bindings-controller"],
        "summary": "Fetch a single Project Binding",
        "operationId": "getProjectBinding",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the project-bindings to fetch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectBinding"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/dop-translation/dop-settings": {
      "get": {
        "tags": ["default-dop-settings-controller"],
        "summary": "List all DevOps Platform Integration settings",
        "description": "Requires the 'Create Projects' permission ",
        "operationId": "fetchAllDopSettings",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DopSettingsRestResponse"
                }
              }
            }
          }
        }
      }
    },
    "/architecture/graphs": {
      "get": {
        "tags": ["e"],
        "summary": "Search all current graphs available for a branch. This endpoint do not includes graph Data itself",
        "operationId": "魺",
        "parameters": [
          {
            "name": "projectKey",
            "in": "query",
            "description": "The key of the project.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branchKey",
            "in": "query",
            "description": "The key of the branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/_C"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/architecture/graphs/{id}": {
      "get": {
        "tags": ["e"],
        "summary": "Get graph data by id.",
        "description": "Fetch the graph data produced by analysis.",
        "operationId": "魺_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the graph data.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/graph+json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/architecture/file-graph": {
      "get": {
        "tags": ["$"],
        "summary": "Find the file graph for this project branch and source.",
        "operationId": "魺_2",
        "parameters": [
          {
            "name": "projectKey",
            "in": "query",
            "description": "The key of the project.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branchKey",
            "in": "query",
            "description": "The key of the branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "source",
            "in": "query",
            "description": "The source that produced this graph. eg. java, python, js, etc.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/analysis/version": {
      "get": {
        "tags": ["default-version-controller"],
        "summary": "Server version",
        "description": "Get the version of the Scanner Engine",
        "operationId": "getVersion",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/analysis/jres": {
      "get": {
        "tags": ["default-jres-controller"],
        "summary": "All JREs metadata",
        "description": "Get metadata of all available JREs",
        "operationId": "getJresMetadata",
        "parameters": [
          {
            "name": "os",
            "in": "query",
            "description": "Filter the JRE by operating system. Accepted values are 'windows', 'linux', 'macos', 'alpine' (case-insensitive), with some aliases",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "arch",
            "in": "query",
            "description": "Filter the JRE by CPU architecture. Accepted values are 'x64' and 'aarch64' (case-insensitive), with some aliases.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/JreInfoRestResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/analysis/jres/{id}": {
      "get": {
        "tags": ["default-jres-controller"],
        "summary": "JRE download/metadata",
        "description": "This endpoint return the JRE metadata by default. To download the JRE binary asset, set the Accept header of the request to 'application/octet-stream'.",
        "operationId": "downloadJre",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the JRE",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/JreInfoRestResponse"
                    },
                    {
                      "type": "string",
                      "format": "binary"
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/JreInfoRestResponse"
                    },
                    {
                      "type": "string",
                      "format": "binary"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/analysis/engine": {
      "get": {
        "tags": ["default-scanner-engine-controller"],
        "summary": "Scanner engine download/metadata",
        "description": "This endpoint return the Scanner Engine metadata by default. To download the Scanner Engine, set the Accept header of the request to 'application/octet-stream'.",
        "operationId": "downloadScannerEngine",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/EngineInfoRestResponse"
                    },
                    {
                      "type": "string",
                      "format": "binary"
                    }
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/EngineInfoRestResponse"
                    },
                    {
                      "type": "string",
                      "format": "binary"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/analysis/active_rules": {
      "get": {
        "tags": ["default-active-rules-controller"],
        "summary": "Get all active rules for a specific project",
        "description": "Used by the scanner-engine to get all active rules for a given project.",
        "operationId": "getActiveRules",
        "parameters": [
          {
            "name": "projectKey",
            "in": "query",
            "description": "Project Key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActiveRule"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sca/license-profiles/assigned-projects/{project-key}": {
      "delete": {
        "tags": ["$"],
        "summary": "Remove the project's assignment to the license profile.",
        "description": "   Remove the project's assignment to the license profile. If there is a default license profile,\n   it will be used to analyze license issues for this project.\n",
        "operationId": "delete_1",
        "parameters": [
          {
            "name": "project-key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "x-sonar-internal": "true"
      }
    },
    "/authorizations/group-memberships/{id}": {
      "delete": {
        "tags": ["default-group-membership-controller"],
        "summary": "Remove a group membership",
        "description": "Remove a user from a group",
        "operationId": "delete_2",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the group membership to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UserCreateRestRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email",
            "maxLength": 100,
            "minLength": 1
          },
          "local": {
            "type": "boolean",
            "default": "true",
            "description": "Specify if the user should be authenticated from SonarQube server or from an external authentication system. Password should not be set when local is set to false."
          },
          "login": {
            "type": "string",
            "description": "User login",
            "maxLength": 100,
            "minLength": 2
          },
          "name": {
            "type": "string",
            "description": "User name",
            "maxLength": 200,
            "minLength": 0
          },
          "password": {
            "type": "string",
            "description": "User password. Only mandatory when creating local user, otherwise it should not be set",
            "writeOnly": true
          },
          "scmAccounts": {
            "type": "array",
            "description": "List of SCM accounts.",
            "items": {
              "type": "string"
            }
          }
        },
        "required": ["login", "name"]
      },
      "UserRestResponseForAdmins": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "login": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "active": {
            "type": "boolean",
            "readOnly": true
          },
          "local": {
            "type": "boolean",
            "readOnly": true
          },
          "managed": {
            "type": "boolean",
            "readOnly": true
          },
          "externalLogin": {
            "type": "string"
          },
          "externalProvider": {
            "type": "string"
          },
          "externalId": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          },
          "sonarQubeLastConnectionDate": {
            "type": "string",
            "readOnly": true
          },
          "sonarLintLastConnectionDate": {
            "type": "string",
            "readOnly": true
          },
          "scmAccounts": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "EmailConfigurationCreateRestRequest": {
        "type": "object",
        "properties": {
          "host": {
            "type": "string",
            "description": "URL of your SMTP server",
            "minLength": 1
          },
          "port": {
            "type": "string",
            "description": "Port of your SMTP server (usually 25, 587 or 465)",
            "minLength": 1
          },
          "securityProtocol": {
            "type": "string",
            "description": "Security protocol used to connect to your SMTP server (SSLTLS is recommended)",
            "enum": ["NONE", "SSLTLS", "STARTTLS"]
          },
          "fromAddress": {
            "type": "string",
            "description": "Address emails will come from",
            "minLength": 1
          },
          "fromName": {
            "type": "string",
            "description": "Name emails will come from (usually \"SonarQube\")",
            "minLength": 1
          },
          "subjectPrefix": {
            "type": "string",
            "description": "Prefix added to email so they can be easily recognized (usually \"[SonarQube]\")",
            "minLength": 1
          },
          "authMethod": {
            "type": "string",
            "description": "Authentication method used to connect to the SMTP server. OAuth is only supported for Microsoft Exchange",
            "enum": ["BASIC", "OAUTH"]
          },
          "username": {
            "type": "string",
            "description": "For Basic and OAuth authentication: username used to authenticate to the SMTP server",
            "minLength": 1
          },
          "basicPassword": {
            "type": "string",
            "description": "For basic authentication: password used to authenticate to the SMTP server",
            "writeOnly": true
          },
          "oauthAuthenticationHost": {
            "type": "string",
            "description": "For OAuth authentication: host of the Identity Provider issuing access tokens"
          },
          "oauthClientId": {
            "type": "string",
            "description": "For OAuth authentication: Client ID provided by Microsoft Exchange when registering the application",
            "writeOnly": true
          },
          "oauthClientSecret": {
            "type": "string",
            "description": "For OAuth authentication: Client secret provided by Microsoft Exchange when registering the application",
            "writeOnly": true
          },
          "oauthTenant": {
            "type": "string",
            "description": "For OAuth authentication: Microsoft tenant"
          }
        },
        "required": ["authMethod", "securityProtocol"]
      },
      "EmailConfigurationResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "host": {
            "type": "string",
            "description": "URL of your SMTP server"
          },
          "port": {
            "type": "string",
            "description": "Port of your SMTP server (usually 25, 587 or 465)"
          },
          "securityProtocol": {
            "type": "string",
            "description": "Security protocol used to connect to your SMTP server (SSLTLS is recommended)",
            "enum": ["NONE", "SSLTLS", "STARTTLS"]
          },
          "fromAddress": {
            "type": "string",
            "description": "Address emails will come from"
          },
          "fromName": {
            "type": "string",
            "description": "Name emails will come from (usually \"SonarQube\")"
          },
          "subjectPrefix": {
            "type": "string",
            "description": "Prefix added to email so they can be easily recognized (usually \"[SonarQube]\")"
          },
          "authMethod": {
            "type": "string",
            "description": "Authentication method used to connect to the SMTP server. OAuth is only supported for Microsoft Exchange",
            "enum": ["BASIC", "OAUTH"]
          },
          "username": {
            "type": "string",
            "description": "For Basic and OAuth authentication: username used to authenticate to the SMTP server"
          },
          "isBasicPasswordSet": {
            "type": "boolean",
            "description": "For Basic authentication: has the password field been set?"
          },
          "oauthAuthenticationHost": {
            "type": "string",
            "description": "For OAuth authentication: host of the Identity Provider issuing access tokens"
          },
          "isOauthClientIdSet": {
            "type": "boolean",
            "description": "For OAuth authentication: has the Client ID field been set?"
          },
          "isOauthClientSecretSet": {
            "type": "boolean",
            "description": "For OAuth authentication: has the Client secret field been set?"
          },
          "oauthTenant": {
            "type": "string",
            "description": "For OAuth authentication: Microsoft tenant"
          }
        }
      },
      "LicenseProfilesCreateRestRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the license policy"
          },
          "default": {
            "type": "boolean",
            "description": "Whether this license policy is the default or not"
          }
        },
        "required": ["name"]
      },
      "LicenseProfileResource": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "default": {
            "type": "boolean"
          },
          "actions": {
            "$ref": "#/components/schemas/LicenseProfileSingleActions"
          },
          "updatedAt": {
            "type": "string"
          }
        }
      },
      "LicenseProfileSingleActions": {
        "type": "object",
        "properties": {
          "edit": {
            "type": "boolean"
          },
          "setAsDefault": {
            "type": "boolean"
          },
          "associateProjects": {
            "type": "boolean"
          },
          "delete": {
            "type": "boolean"
          }
        }
      },
      "UpdateAssigneeRestRequest": {
        "type": "object",
        "properties": {
          "issueReleaseKey": {
            "type": "string",
            "description": "Issue release key"
          },
          "assigneeLogin": {
            "type": "string",
            "description": "Assignee login"
          }
        },
        "required": ["issueReleaseKey"]
      },
      "AffectedPackageResource": {
        "type": "object",
        "properties": {
          "purl": {
            "type": "string"
          },
          "recommendation": {
            "type": "string",
            "description": "The maintainer's overall recommendation, if available",
            "enum": ["ignore", "upgrade", "upgrade_or_workaround"]
          },
          "recommendationDetails": {
            "$ref": "#/components/schemas/VulnerabilityRecommendationDetailsResource"
          },
          "versionOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VersionOptionResource"
            }
          },
          "affectedVersions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "unaffectedVersions": {
            "type": "string"
          }
        }
      },
      "BranchResource": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "isPullRequest": {
            "type": "boolean"
          },
          "projectKey": {
            "type": "string"
          },
          "projectName": {
            "type": "string"
          }
        }
      },
      "IssueReleaseDetailsResource": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "severity": {
            "type": "string"
          },
          "originalSeverity": {
            "type": "string"
          },
          "manualSeverity": {
            "type": "string"
          },
          "showIncreasedSeverityWarning": {
            "type": "boolean"
          },
          "release": {
            "$ref": "#/components/schemas/ReleaseSearchResource"
          },
          "type": {
            "type": "string",
            "enum": ["VULNERABILITY", "PROHIBITED_LICENSE"]
          },
          "quality": {
            "type": "string",
            "enum": ["MAINTAINABILITY", "RELIABILITY", "SECURITY"]
          },
          "status": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "assignee": {
            "$ref": "#/components/schemas/UserResource"
          },
          "commentCount": {
            "type": "integer",
            "format": "int32"
          },
          "vulnerability": {
            "$ref": "#/components/schemas/VulnerabilityResource"
          },
          "spdxLicenseId": {
            "type": "string"
          },
          "transitions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["CONFIRM", "REOPEN", "SAFE", "FIXED", "ACCEPT"]
            }
          },
          "actions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["COMMENT", "ASSIGN", "SET_SEVERITY"]
            },
            "uniqueItems": true
          },
          "branch": {
            "$ref": "#/components/schemas/BranchResource"
          }
        }
      },
      "ReleaseSearchResource": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "branchUuid": {
            "type": "string"
          },
          "packageUrl": {
            "type": "string"
          },
          "packageManager": {
            "type": "string"
          },
          "packageName": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "licenseExpression": {
            "type": "string"
          },
          "known": {
            "type": "boolean"
          },
          "knownPackage": {
            "type": "boolean"
          },
          "newlyIntroduced": {
            "type": "boolean"
          },
          "directSummary": {
            "type": "boolean"
          },
          "scopeSummary": {
            "type": "string"
          },
          "productionScopeSummary": {
            "type": "boolean"
          },
          "dependencyFilePaths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UserResource": {
        "type": "object",
        "properties": {
          "login": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          }
        }
      },
      "VersionOptionResource": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "description": "The version being presented as an option"
          },
          "vulnerabilityIds": {
            "type": "array",
            "description": "Vulnerability IDs affecting this version",
            "items": {
              "type": "string"
            }
          },
          "prerelease": {
            "type": "boolean",
            "description": "Is this version a pre-release version"
          },
          "fixLevel": {
            "type": "string",
            "description": "Describes which vulnerabilities are fixed",
            "enum": ["COMPLETE", "PARTIAL", "NONE", "UNKNOWN"]
          },
          "descriptionCode": {
            "type": "string",
            "description": "How the frontend should label this version",
            "enum": [
              "VERSION_IN_USE",
              "NEAREST_PARTIAL",
              "NEAREST_COMPLETE",
              "LATEST_PARTIAL",
              "LATEST_COMPLETE",
              "LATEST_STABLE",
              "LATEST_PRERELEASE",
              "UNKNOWN"
            ]
          }
        }
      },
      "VulnerabilityRecommendationDetailsResource": {
        "type": "object",
        "properties": {
          "impactScore": {
            "type": "integer",
            "format": "int32"
          },
          "impactDescription": {
            "type": "string"
          },
          "realIssue": {
            "type": "boolean"
          },
          "falsePositiveReason": {
            "type": "string"
          },
          "includesDev": {
            "type": "boolean"
          },
          "specificMethodsAffected": {
            "type": "boolean"
          },
          "specificMethodsDescription": {
            "type": "string"
          },
          "otherConditions": {
            "type": "boolean"
          },
          "otherConditionsDescription": {
            "type": "string"
          },
          "workaroundAvailable": {
            "type": "boolean"
          },
          "workaroundDescription": {
            "type": "string"
          },
          "visibility": {
            "type": "string"
          }
        }
      },
      "VulnerabilityReportResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "cvssScore": {
            "type": "string"
          },
          "cvssSeverity": {
            "type": "string"
          },
          "withdrawnAt": {
            "type": "string"
          }
        }
      },
      "VulnerabilityResource": {
        "type": "object",
        "properties": {
          "vulnerabilityId": {
            "type": "string"
          },
          "reports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VulnerabilityReportResource"
            }
          },
          "description": {
            "type": "string"
          },
          "epssPercentile": {
            "type": "string"
          },
          "epssProbability": {
            "type": "string"
          },
          "knownExploited": {
            "type": "boolean"
          },
          "cweIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "publishedOn": {
            "type": "string"
          },
          "affectedPackages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AffectedPackageResource"
            }
          },
          "withdrawn": {
            "type": "boolean"
          }
        }
      },
      "IssueReleaseSetSeverityRestRequest": {
        "type": "object",
        "properties": {
          "issueReleaseKey": {
            "type": "string",
            "description": "Issue release key"
          },
          "quality": {
            "type": "string",
            "description": "Software Quality",
            "enum": ["MAINTAINABILITY", "RELIABILITY", "SECURITY"]
          },
          "severity": {
            "type": "string",
            "description": "Severity",
            "enum": ["INFO", "LOW", "MEDIUM", "HIGH", "BLOCKER"]
          }
        },
        "required": ["issueReleaseKey", "quality", "severity"]
      },
      "IssueReleaseClearSeverityWarningRestRequest": {
        "type": "object",
        "properties": {
          "issueReleaseKey": {
            "type": "string",
            "description": "Issue release key"
          }
        },
        "required": ["issueReleaseKey"]
      },
      "IssueReleaseStatusTransitionRequest": {
        "type": "object",
        "properties": {
          "issueReleaseKey": {
            "type": "string",
            "description": "Issue release key"
          },
          "transitionKey": {
            "type": "string",
            "description": "Transition key",
            "enum": ["CONFIRM", "REOPEN", "SAFE", "FIXED", "ACCEPT"]
          },
          "comment": {
            "type": "string",
            "description": "Transition comment"
          }
        },
        "required": ["issueReleaseKey", "transitionKey"]
      },
      "IssueReleaseAddCommentRestRequest": {
        "type": "object",
        "properties": {
          "issueReleaseKey": {
            "type": "string",
            "description": "Issue release key"
          },
          "comment": {
            "type": "string",
            "description": "comment"
          }
        },
        "required": ["issueReleaseKey"]
      },
      "AwarenessBannerClickedRequest": {
        "type": "object",
        "properties": {
          "bannerType": {
            "type": "string",
            "enum": ["ENABLE", "LEARN_MORE"]
          }
        }
      },
      "AwarenessBannerClickedResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "FixSuggestionPostRequest": {
        "type": "object",
        "properties": {
          "projectKey": {
            "type": "string"
          },
          "issueId": {
            "type": "string",
            "description": "Issue key"
          },
          "issue": {
            "$ref": "#/components/schemas/Issue",
            "description": "Issue"
          }
        }
      },
      "Issue": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "startLine": {
            "type": "integer",
            "format": "int32"
          },
          "endLine": {
            "type": "integer",
            "format": "int32"
          },
          "ruleKey": {
            "type": "string"
          },
          "sourceCode": {
            "type": "string"
          }
        },
        "required": ["endLine", "message", "ruleKey", "sourceCode", "startLine"]
      },
      "ChangeDto": {
        "type": "object",
        "properties": {
          "startLine": {
            "type": "integer",
            "format": "int32"
          },
          "endLine": {
            "type": "integer",
            "format": "int32"
          },
          "newCode": {
            "type": "string"
          }
        }
      },
      "FixSuggestionResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "issueId": {
            "type": "string"
          },
          "explanation": {
            "type": "string"
          },
          "changes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChangeDto"
            }
          }
        }
      },
      "LicenseRestRequest": {
        "type": "object",
        "properties": {
          "licenseKey": {
            "type": "string",
            "description": "New license key"
          }
        }
      },
      "LicenseUploadActivationRequest": {
        "type": "object",
        "properties": {
          "license": {
            "type": "string",
            "description": "Contents of a valid .lic file"
          },
          "licenseKey": {
            "type": "string",
            "description": "License key for the license"
          }
        }
      },
      "LegacyLicenseRestRequest": {
        "type": "object",
        "properties": {
          "licenseKey": {
            "type": "string",
            "description": "New license key"
          }
        }
      },
      "GitlabSynchronizationRunResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "PermissionMappingsPostRequest": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "Custom role name"
          },
          "permissions": {
            "$ref": "#/components/schemas/RestPermissions",
            "description": "Set of SonarQube permissions to apply"
          }
        },
        "required": ["permissions", "role"]
      },
      "RestPermissions": {
        "type": "object",
        "properties": {
          "user": {
            "type": "boolean",
            "description": "Browse"
          },
          "codeViewer": {
            "type": "boolean",
            "description": "See Source Code"
          },
          "issueAdmin": {
            "type": "boolean",
            "description": "Administer Issues"
          },
          "securityHotspotAdmin": {
            "type": "boolean",
            "description": "Administer Security Hotspots"
          },
          "admin": {
            "type": "boolean",
            "description": "Administer"
          },
          "scan": {
            "type": "boolean",
            "description": "Execute Analysis"
          }
        },
        "required": [
          "admin",
          "codeViewer",
          "issueAdmin",
          "scan",
          "securityHotspotAdmin",
          "user"
        ]
      },
      "PermissionMappingsResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "baseRole": {
            "type": "boolean"
          },
          "permissions": {
            "$ref": "#/components/schemas/RestPermissions"
          }
        }
      },
      "GitlabConfigurationCreateRestRequest": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Enable Gitlab authentication"
          },
          "applicationId": {
            "type": "string",
            "description": "Gitlab Application id",
            "minLength": 1
          },
          "url": {
            "type": "string",
            "description": "Url of Gitlab instance for authentication (for instance https://gitlab.com)",
            "minLength": 1
          },
          "secret": {
            "type": "string",
            "description": "Secret of the application",
            "minLength": 1,
            "writeOnly": true
          },
          "synchronizeGroups": {
            "type": "boolean",
            "description": "Set whether to synchronize groups"
          },
          "allowedGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "provisioningType": {
            "type": "string",
            "description": "Type of synchronization",
            "enum": ["JIT", "AUTO_PROVISIONING"]
          },
          "provisioningToken": {
            "type": "string",
            "description": "Gitlab token for provisioning",
            "writeOnly": true
          },
          "allowUsersToSignUp": {
            "type": "boolean",
            "description": "Allow user to sign up"
          }
        },
        "required": [
          "allowedGroups",
          "enabled",
          "provisioningType",
          "synchronizeGroups"
        ]
      },
      "GitlabConfigurationResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "enabled": {
            "type": "boolean"
          },
          "applicationId": {
            "type": "string",
            "description": "Gitlab Application id"
          },
          "url": {
            "type": "string",
            "description": "Url of Gitlab instance for authentication (for instance https://gitlab.com/api/v4)"
          },
          "synchronizeGroups": {
            "type": "boolean"
          },
          "allowedGroups": {
            "type": "array",
            "description": "Root Gitlab groups allowed to authenticate and provisioned",
            "items": {
              "type": "string"
            }
          },
          "allowUsersToSignUp": {
            "type": "boolean"
          },
          "provisioningType": {
            "type": "string",
            "enum": ["JIT", "AUTO_PROVISIONING"]
          },
          "isProvisioningTokenSet": {
            "type": "boolean",
            "description": "Whether or not the provisioningToken is defined",
            "readOnly": true
          },
          "errorMessage": {
            "type": "string",
            "description": "In case the GitLab configuration is incorrect, error message",
            "readOnly": true
          }
        }
      },
      "GithubConfigurationCreateRestRequest": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Enable GitHub authentication"
          },
          "clientId": {
            "type": "string",
            "description": "Client ID provided by GitHub when registering the application.",
            "minLength": 1,
            "writeOnly": true
          },
          "clientSecret": {
            "type": "string",
            "description": "Client password provided by GitHub when registering the application.",
            "minLength": 1,
            "writeOnly": true
          },
          "applicationId": {
            "type": "string",
            "description": "The App ID is found on your GitHub App's page on GitHub at Settings > Developer Settings > GitHub Apps.",
            "minLength": 1
          },
          "privateKey": {
            "type": "string",
            "description": "Your GitHub App's private key. You can generate a .pem file from your GitHub App's page under Private keys.\nCopy and paste the whole contents of the file here.\n",
            "minLength": 1,
            "writeOnly": true
          },
          "synchronizeGroups": {
            "type": "boolean",
            "description": "Synchronize GitHub team with SonarQube group memberships when users log in to SonarQube.\nFor each GitHub team they belong to, users will be associated to a group of the same name if it exists in SonarQube.\n"
          },
          "apiUrl": {
            "type": "string",
            "description": "The API url for a GitHub instance. https://api.github.com/ for Github.com, https://github.company.com/api/v3/ when using Github Enterprise",
            "minLength": 1
          },
          "webUrl": {
            "type": "string",
            "description": "The WEB url for a GitHub instance. https://github.com/ for Github.com, https://github.company.com/ when using GitHub Enterprise.\n",
            "minLength": 1
          },
          "allowedOrganizations": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "provisioningType": {
            "type": "string",
            "description": "Type of synchronization",
            "enum": ["JIT", "AUTO_PROVISIONING"]
          },
          "allowUsersToSignUp": {
            "type": "boolean",
            "description": "Allow user to sign up"
          },
          "projectVisibility": {
            "type": "boolean",
            "description": "Change project visibility based on GitHub repository visibility.\nIf disabled, every provisioned project will be private in SonarQube and visible only to users with explicit GitHub permissions for the corresponding repository.\nChanges take effect at the next synchronization.\n"
          },
          "userConsentRequiredAfterUpgrade": {
            "type": "boolean",
            "description": "Admin consent to synchronize permissions from GitHub"
          }
        },
        "required": [
          "allowedOrganizations",
          "enabled",
          "provisioningType",
          "synchronizeGroups"
        ]
      },
      "GithubConfigurationResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "enabled": {
            "type": "boolean"
          },
          "applicationId": {
            "type": "string",
            "description": "GitHub Application id"
          },
          "synchronizeGroups": {
            "type": "boolean"
          },
          "apiUrl": {
            "type": "string",
            "description": "Url of GitHub instance for API connectivity (for instance https://api.github.com)"
          },
          "webUrl": {
            "type": "string",
            "description": "Url of GitHub instance for authentication (for instance https://github.com)"
          },
          "allowedOrganizations": {
            "type": "array",
            "description": "GitHub organizations allowed to authenticate and provisioned",
            "items": {
              "type": "string"
            }
          },
          "provisioningType": {
            "type": "string",
            "enum": ["JIT", "AUTO_PROVISIONING"]
          },
          "allowUsersToSignUp": {
            "type": "boolean"
          },
          "projectVisibility": {
            "type": "boolean"
          },
          "userConsentRequiredAfterUpgrade": {
            "type": "boolean"
          },
          "errorMessage": {
            "type": "string",
            "description": "In case the GitHub configuration is incorrect, error message",
            "readOnly": true
          }
        }
      },
      "BoundProjectCreateRestRequest": {
        "type": "object",
        "properties": {
          "projectKey": {
            "type": "string",
            "description": "Key of the project to create",
            "minLength": 1
          },
          "projectName": {
            "type": "string",
            "description": "Name of the project to create",
            "minLength": 1
          },
          "devOpsPlatformSettingId": {
            "type": "string",
            "description": "Identifier of DevOps platform configuration to use. Use /dop-translation/dop-settings to retrieve the settings and their ID",
            "minLength": 1
          },
          "repositoryIdentifier": {
            "type": "string",
            "description": "Identifier of the DevOps platform repository to import:\n- repository slug for GitHub and Bitbucket (Cloud and Server)\n- repository id for GitLab\n- repository name for Azure DevOps\n",
            "minLength": 1
          },
          "projectIdentifier": {
            "type": "string",
            "description": "Identifier of the DevOps platform project in which the repository is located.\nThis is only needed for Azure and BitBucket Server platforms\n"
          },
          "newCodeDefinitionType": {
            "type": "string",
            "description": "  Project New Code Definition Type\n  New code definitions of the following types are allowed:\n    - PREVIOUS_VERSION\n    - NUMBER_OF_DAYS\n    - REFERENCE_BRANCH - will default to the main branch.\n"
          },
          "newCodeDefinitionValue": {
            "type": "string",
            "description": "  Project New Code Definition Value\n  For each new code definition type, a different value is expected:\n  - no value, when the new code definition type is PREVIOUS_VERSION and REFERENCE_BRANCH\n  - a number between 1 and 90, when the new code definition type is NUMBER_OF_DAYS\n"
          },
          "monorepo": {
            "type": "boolean",
            "description": "True if project is part of a mono repo."
          }
        },
        "required": ["monorepo"]
      },
      "BoundProjectCreateRestResponse": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "description": "The identifier of the created project"
          },
          "bindingId": {
            "type": "string",
            "description": "The identifier of the binding between the created project and the DevOps platform project"
          }
        }
      },
      "Impact": {
        "type": "object",
        "properties": {
          "softwareQuality": {
            "type": "string",
            "enum": ["MAINTAINABILITY", "RELIABILITY", "SECURITY"]
          },
          "severity": {
            "type": "string",
            "enum": ["INFO", "LOW", "MEDIUM", "HIGH", "BLOCKER"]
          }
        }
      },
      "Parameter": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "htmlDescription": {
            "type": "string",
            "readOnly": true
          },
          "defaultValue": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["STRING", "TEXT", "BOOLEAN", "INTEGER", "FLOAT"],
            "readOnly": true
          }
        }
      },
      "RuleCreateRestRequest": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Key of the custom rule to create, must include the repository",
            "maxLength": 200,
            "minLength": 0
          },
          "templateKey": {
            "type": "string",
            "description": "Key of the rule template to be used to create the custom rule",
            "maxLength": 200,
            "minLength": 0
          },
          "name": {
            "type": "string",
            "description": "Rule name",
            "maxLength": 200,
            "minLength": 0
          },
          "markdownDescription": {
            "type": "string",
            "description": "Rule description in markdown format"
          },
          "status": {
            "type": "string",
            "default": "READY",
            "description": "Rule status",
            "enum": ["BETA", "DEPRECATED", "READY", "REMOVED"]
          },
          "parameters": {
            "type": "array",
            "description": "Custom rule parameters",
            "items": {
              "$ref": "#/components/schemas/Parameter"
            }
          },
          "cleanCodeAttribute": {
            "type": "string",
            "description": "Clean code attribute",
            "enum": [
              "CONVENTIONAL",
              "FORMATTED",
              "IDENTIFIABLE",
              "CLEAR",
              "COMPLETE",
              "EFFICIENT",
              "LOGICAL",
              "DISTINCT",
              "FOCUSED",
              "MODULAR",
              "TESTED",
              "LAWFUL",
              "RESPECTFUL",
              "TRUSTWORTHY"
            ]
          },
          "impacts": {
            "type": "array",
            "description": "Impacts",
            "items": {
              "$ref": "#/components/schemas/Impact"
            }
          },
          "severity": {
            "type": "string",
            "description": "Severity"
          },
          "type": {
            "type": "string",
            "description": "Rule type",
            "enum": ["CODE_SMELL", "BUG", "VULNERABILITY", "SECURITY_HOTSPOT"]
          }
        },
        "required": [
          "impacts",
          "key",
          "markdownDescription",
          "name",
          "templateKey"
        ]
      },
      "RuleDescriptionSectionContextRestResponse": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          }
        },
        "readOnly": true
      },
      "RuleDescriptionSectionRestResponse": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "readOnly": true
          },
          "content": {
            "type": "string",
            "readOnly": true
          },
          "context": {
            "$ref": "#/components/schemas/RuleDescriptionSectionContextRestResponse",
            "readOnly": true
          }
        }
      },
      "RuleRestResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "repositoryKey": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "severity": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["CODE_SMELL", "BUG", "VULNERABILITY", "SECURITY_HOTSPOT"]
          },
          "impacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Impact"
            }
          },
          "cleanCodeAttribute": {
            "type": "string",
            "enum": [
              "CONVENTIONAL",
              "FORMATTED",
              "IDENTIFIABLE",
              "CLEAR",
              "COMPLETE",
              "EFFICIENT",
              "LOGICAL",
              "DISTINCT",
              "FOCUSED",
              "MODULAR",
              "TESTED",
              "LAWFUL",
              "RESPECTFUL",
              "TRUSTWORTHY"
            ]
          },
          "cleanCodeAttributeCategory": {
            "type": "string",
            "enum": ["ADAPTABLE", "CONSISTENT", "INTENTIONAL", "RESPONSIBLE"]
          },
          "status": {
            "type": "string",
            "enum": ["BETA", "DEPRECATED", "READY", "REMOVED"]
          },
          "external": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string"
          },
          "descriptionSections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuleDescriptionSectionRestResponse"
            }
          },
          "markdownDescription": {
            "type": "string"
          },
          "gapDescription": {
            "type": "string"
          },
          "htmlNote": {
            "type": "string"
          },
          "markdownNote": {
            "type": "string"
          },
          "educationPrinciples": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "template": {
            "type": "boolean"
          },
          "templateId": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "systemTags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "languageKey": {
            "type": "string"
          },
          "languageName": {
            "type": "string"
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Parameter"
            }
          },
          "remediationFunctionType": {
            "type": "string"
          },
          "remediationFunctionGapMultiplier": {
            "type": "string"
          },
          "remediationFunctionBaseEffort": {
            "type": "string"
          }
        },
        "readOnly": true
      },
      "GroupCreateRestRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name for the new group. Must be unique. The value 'anyone' is reserved and cannot be used.",
            "maxLength": 255,
            "minLength": 1
          },
          "description": {
            "type": "string",
            "description": "Description for the new group.",
            "maxLength": 200,
            "minLength": 0
          }
        }
      },
      "GroupRestResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "managed": {
            "type": "boolean",
            "readOnly": true
          },
          "default": {
            "type": "boolean",
            "readOnly": true
          }
        }
      },
      "GroupMembershipCreateRestRequest": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "ID of the user to add to group."
          },
          "groupId": {
            "type": "string",
            "description": "ID of the group where a member needs to be added."
          }
        }
      },
      "GroupMembershipRestResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "groupId": {
            "type": "string",
            "readOnly": true
          },
          "userId": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "UpdateFieldListString": {
        "type": "object",
        "properties": {
          "value": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "defined": {
            "type": "boolean"
          }
        }
      },
      "UpdateFieldString": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "defined": {
            "type": "boolean"
          }
        }
      },
      "UserUpdateRestRequest": {
        "type": "object",
        "properties": {
          "login": {
            "$ref": "#/components/schemas/UpdateFieldString",
            "description": "User login"
          },
          "name": {
            "type": "string",
            "description": "User first name and last name",
            "maxLength": 200,
            "minLength": 0
          },
          "email": {
            "type": "string",
            "description": "Email",
            "maxLength": 100,
            "minLength": 1
          },
          "scmAccounts": {
            "$ref": "#/components/schemas/UpdateFieldListString",
            "items": {
              "type": "string"
            }
          },
          "externalProvider": {
            "type": "string",
            "description": "New identity provider. Only providers configured in your platform are supported. This could be: github, gitlab, bitbucket, saml, LDAP, LDAP_{serverKey}\n(according to your server configuration file).\nWarning: when this is updated, the user will only be able to authenticate using the new identity provider. Also, it is not possible to remove the identity provider of a user.\n"
          },
          "externalLogin": {
            "type": "string",
            "description": "New external login, usually the login used in the authentication system.",
            "maxLength": 255,
            "minLength": 1
          },
          "externalId": {
            "type": "string",
            "description": "New external id in the authentication system.",
            "maxLength": 255,
            "minLength": 1
          }
        }
      },
      "EmailConfigurationUpdateRestRequest": {
        "type": "object",
        "properties": {
          "host": {
            "type": "string",
            "description": "URL of your SMTP server"
          },
          "port": {
            "type": "string",
            "description": "Port of your SMTP server (usually 25, 587 or 465)"
          },
          "securityProtocol": {
            "type": "string",
            "description": "Security protocol used to connect to your SMTP server (SSLTLS is recommended)",
            "enum": ["NONE", "SSLTLS", "STARTTLS"]
          },
          "fromAddress": {
            "type": "string",
            "description": "Address emails will come from"
          },
          "fromName": {
            "type": "string",
            "description": "Name emails will come from (usually \"SonarQube\")"
          },
          "subjectPrefix": {
            "type": "string",
            "description": "Prefix added to email so they can be easily recognized (usually \"[SonarQube]\")"
          },
          "authMethod": {
            "type": "string",
            "description": "Authentication method used to connect to the SMTP server. OAuth is only supported for Microsoft Exchange",
            "enum": ["BASIC", "OAUTH"]
          },
          "username": {
            "type": "string",
            "description": "For Basic and OAuth authentication: username used to authenticate to the SMTP server"
          },
          "basicPassword": {
            "type": "string",
            "description": "For basic authentication: password used to authenticate to the SMTP server"
          },
          "oauthAuthenticationHost": {
            "type": "string",
            "description": "For OAuth authentication: host of the Identity Provider issuing access tokens"
          },
          "oauthClientId": {
            "type": "string",
            "description": "For OAuth authentication: Client ID provided by Microsoft Exchange when registering the application"
          },
          "oauthClientSecret": {
            "type": "string",
            "description": "For OAuth authentication: Client password provided by Microsoft Exchange when registering the application"
          },
          "oauthTenant": {
            "type": "string",
            "description": "For OAuth authentication: Microsoft tenant"
          }
        }
      },
      "LicenseProfilesUpdateRestRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the license policy"
          },
          "default": {
            "type": "boolean",
            "description": "Whether this license policy is the default or not"
          }
        }
      },
      "LicensePolicyLicenseUpdateRestRequest": {
        "type": "object",
        "properties": {
          "policy": {
            "type": "string",
            "description": "The new status of this license.",
            "enum": ["ALLOW", "DENY"]
          }
        },
        "required": ["policy"]
      },
      "LicensePolicyLicenseResource": {
        "type": "object",
        "properties": {
          "spdxLicenseId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "category": {
            "type": "string",
            "enum": [
              "UNKNOWN",
              "COPYLEFT_WEAK",
              "COPYLEFT_STRONG",
              "COPYLEFT_NETWORK",
              "COPYLEFT_MAXIMAL",
              "PERMISSIVE_STANDARD",
              "PERMISSIVE_AMATEUR"
            ]
          },
          "policy": {
            "type": "string",
            "description": "The policy status of this license.",
            "enum": ["ALLOW", "DENY"]
          }
        }
      },
      "LicenseProfileCategoryUpdateRestRequest": {
        "type": "object",
        "properties": {
          "policy": {
            "type": "string",
            "description": "The new status of this category.",
            "enum": ["ALLOW", "DENY"]
          }
        },
        "required": ["policy"]
      },
      "LicenseProfileCategoryResource": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "enum": [
              "UNKNOWN",
              "COPYLEFT_WEAK",
              "COPYLEFT_STRONG",
              "COPYLEFT_NETWORK",
              "COPYLEFT_MAXIMAL",
              "PERMISSIVE_STANDARD",
              "PERMISSIVE_AMATEUR"
            ]
          },
          "policy": {
            "type": "string",
            "description": "The policy status of this category.",
            "enum": ["ALLOW", "DENY"]
          }
        }
      },
      "AssignedProjectsUpdateRestRequest": {
        "type": "object",
        "properties": {
          "licenseProfileUuid": {
            "type": "string",
            "description": "The id of the license profile that should be used when analyzing the project for license issues."
          },
          "projectKey": {
            "type": "string",
            "description": "The key of the project that should be assigned to the license profile."
          }
        },
        "required": ["licenseProfileUuid", "projectKey"]
      },
      "IssueReleaseUpdateCommentRestRequest": {
        "type": "object",
        "properties": {
          "issueReleaseChangeKey": {
            "type": "string",
            "description": "Issue release change key"
          },
          "comment": {
            "type": "string",
            "description": "Comment text"
          }
        },
        "required": ["comment", "issueReleaseChangeKey"]
      },
      "FeatureEnablementRequest": {
        "type": "object",
        "properties": {
          "enablement": {
            "type": "boolean",
            "description": "Whether SCA is enabled or not"
          }
        }
      },
      "FeatureEnablementResource": {
        "type": "object",
        "properties": {
          "enablement": {
            "type": "boolean"
          }
        }
      },
      "DevOpsPermissionMappingUpdateRequest": {
        "type": "object",
        "properties": {
          "permissions": {
            "$ref": "#/components/schemas/PermissionMappingUpdate",
            "description": "Set of SonarQube permissions to apply"
          }
        }
      },
      "PermissionMappingUpdate": {
        "type": "object",
        "properties": {
          "user": {
            "type": "boolean"
          },
          "codeViewer": {
            "type": "boolean"
          },
          "issueAdmin": {
            "type": "boolean"
          },
          "securityHotspotAdmin": {
            "type": "boolean"
          },
          "admin": {
            "type": "boolean"
          },
          "scan": {
            "type": "boolean"
          }
        }
      },
      "GitlabConfigurationUpdateRestRequest": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Enable Gitlab authentication"
          },
          "applicationId": {
            "type": "string",
            "description": "Gitlab Application id"
          },
          "url": {
            "type": "string",
            "description": "Url of Gitlab instance for authentication (for instance https://gitlab.com/api/v4)"
          },
          "secret": {
            "type": "string",
            "description": "Secret of the application"
          },
          "synchronizeGroups": {
            "type": "boolean",
            "description": "Set whether to synchronize groups"
          },
          "allowedGroups": {
            "$ref": "#/components/schemas/UpdateFieldListString",
            "items": {
              "type": "string"
            }
          },
          "provisioningType": {
            "type": "string",
            "description": "Type of synchronization",
            "enum": ["JIT", "AUTO_PROVISIONING"]
          },
          "allowUsersToSignUp": {
            "type": "boolean",
            "description": "Allow user to sign up"
          },
          "provisioningToken": {
            "type": "string",
            "description": "Gitlab token for provisioning",
            "maxLength": 2147483647,
            "minLength": 1
          }
        }
      },
      "GithubConfigurationUpdateRestRequest": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Enable GitHub authentication"
          },
          "clientId": {
            "type": "string",
            "description": "GitHub Client ID"
          },
          "clientSecret": {
            "type": "string",
            "description": "GitHub Client secret"
          },
          "applicationId": {
            "type": "string",
            "description": "GitHub Application id"
          },
          "privateKey": {
            "type": "string",
            "description": "GitHub Private key"
          },
          "synchronizeGroups": {
            "type": "boolean",
            "description": "Set whether to synchronize groups"
          },
          "apiUrl": {
            "type": "string",
            "description": "Url of GitHub instance for API connectivity (for instance https://api.github.com)"
          },
          "webUrl": {
            "type": "string",
            "description": "Url of GitHub instance for authentication (for instance https://github.com)"
          },
          "allowedOrganizations": {
            "$ref": "#/components/schemas/UpdateFieldListString",
            "items": {
              "type": "string"
            }
          },
          "provisioningType": {
            "type": "string",
            "description": "Type of synchronization",
            "enum": ["JIT", "AUTO_PROVISIONING"]
          },
          "allowUsersToSignUp": {
            "type": "boolean",
            "description": "Allow user to sign up"
          },
          "projectVisibility": {
            "type": "boolean",
            "description": "Sync project visibility"
          },
          "userConsentRequiredAfterUpgrade": {
            "type": "boolean",
            "description": "Admin consent to synchronize permissions from GitHub"
          }
        }
      },
      "ModeResource": {
        "type": "object",
        "properties": {
          "mode": {
            "type": "string",
            "enum": ["MQR", "STANDARD_EXPERIENCE"]
          },
          "modified": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "required": ["mode"]
      },
      "GroupUpdateRestRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Group name",
            "maxLength": 255,
            "minLength": 1
          },
          "description": {
            "type": "string",
            "description": "Description of the group",
            "maxLength": 200,
            "minLength": 0
          }
        }
      },
      "PageRestResponse": {
        "type": "object",
        "properties": {
          "pageIndex": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "UsersSearchRestResponse": {
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRestResponseForAdmins"
            }
          },
          "page": {
            "$ref": "#/components/schemas/PageRestResponse"
          }
        }
      },
      "DatabaseMigrationsResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "completedSteps": {
            "type": "integer",
            "format": "int32"
          },
          "totalSteps": {
            "type": "integer",
            "format": "int32"
          },
          "startedAt": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "expectedFinishTimestamp": {
            "type": "string"
          }
        }
      },
      "Health": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["GREEN", "YELLOW", "RED"]
          },
          "causes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true
          }
        }
      },
      "EmailConfigurationSearchRestResponse": {
        "type": "object",
        "properties": {
          "emailConfigurations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailConfigurationResource"
            }
          },
          "page": {
            "$ref": "#/components/schemas/PageRestResponse"
          }
        }
      },
      "SelfTestHttpCallResource": {
        "type": "object",
        "properties": {
          "attemptedUrl": {
            "type": "string"
          },
          "attemptedMethod": {
            "type": "string"
          },
          "responseCode": {
            "type": "integer",
            "format": "int32"
          },
          "responseBody": {
            "type": "string"
          },
          "responseBodyAppearsValid": {
            "type": "boolean"
          },
          "responseHeaders": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "SelfTestResponse": {
        "type": "object",
        "properties": {
          "featureEnabled": {
            "type": "boolean"
          },
          "selfTestPassed": {
            "type": "boolean"
          },
          "cliVersionCheck": {
            "$ref": "#/components/schemas/SelfTestHttpCallResource"
          },
          "vulnerabilityDetailsCheck": {
            "$ref": "#/components/schemas/SelfTestHttpCallResource"
          }
        }
      },
      "SelfTestSpringConfigurationResponse": {
        "type": "object",
        "properties": {
          "springVersion": {
            "type": "string"
          }
        }
      },
      "RiskReportItem": {
        "type": "object",
        "properties": {
          "projectKey": {
            "type": "string"
          },
          "projectName": {
            "type": "string"
          },
          "branchKey": {
            "type": "string"
          },
          "riskTitle": {
            "type": "string"
          },
          "riskType": {
            "type": "string",
            "enum": ["VULNERABILITY", "PROHIBITED_LICENSE"]
          },
          "riskSeverity": {
            "type": "string",
            "enum": ["INFO", "LOW", "MEDIUM", "HIGH", "BLOCKER"]
          },
          "riskStatus": {
            "type": "string",
            "enum": ["OPEN", "ACCEPT", "CONFIRM", "SAFE", "FIXED"]
          },
          "statusChanges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatusChange"
            }
          },
          "vulnerabilityId": {
            "type": "string"
          },
          "cvssScore": {
            "type": "number"
          },
          "cweIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "publishedOn": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "packageUrl": {
            "type": "string"
          },
          "dependencyChains": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "StatusChange": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string"
          },
          "newStatus": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          }
        }
      },
      "ReleasesSearchRestResponse": {
        "type": "object",
        "properties": {
          "releases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReleaseSearchResource"
            }
          },
          "packageManagerCounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScaReleaseByPackageManagerCountDto"
            }
          },
          "branches": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BranchResource"
            }
          },
          "countWithoutFilters": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "$ref": "#/components/schemas/PageRestResponse"
          }
        }
      },
      "ScaReleaseByPackageManagerCountDto": {
        "type": "object",
        "properties": {
          "packageManager": {
            "type": "string"
          },
          "releaseCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "DependencyResource": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "direct": {
            "type": "boolean"
          },
          "scope": {
            "type": "string"
          },
          "productionScope": {
            "type": "boolean"
          },
          "userDependencyFilePath": {
            "type": "string"
          },
          "lockfileDependencyFilePath": {
            "type": "string"
          },
          "chains": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "newlyIntroduced": {
            "type": "boolean"
          }
        }
      },
      "IssueResource": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "severity": {
            "type": "string"
          },
          "showIncreasedSeverityWarning": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": ["VULNERABILITY", "PROHIBITED_LICENSE"]
          },
          "quality": {
            "type": "string",
            "enum": ["MAINTAINABILITY", "RELIABILITY", "SECURITY"]
          },
          "createdAt": {
            "type": "string"
          },
          "assignee": {
            "$ref": "#/components/schemas/UserResource"
          },
          "vulnerabilityId": {
            "type": "string"
          },
          "cweIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cvssScore": {
            "type": "string"
          },
          "spdxLicenseId": {
            "type": "string"
          }
        }
      },
      "ReleaseDetailResource": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "branchUuid": {
            "type": "string"
          },
          "packageUrl": {
            "type": "string"
          },
          "packageManager": {
            "type": "string"
          },
          "packageName": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "licenseExpression": {
            "type": "string"
          },
          "known": {
            "type": "boolean"
          },
          "knownPackage": {
            "type": "boolean"
          },
          "newlyIntroduced": {
            "type": "boolean"
          },
          "directSummary": {
            "type": "boolean"
          },
          "scopeSummary": {
            "type": "string"
          },
          "productionScopeSummary": {
            "type": "boolean"
          },
          "dependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DependencyResource"
            }
          },
          "issues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IssueResource"
            }
          },
          "branch": {
            "$ref": "#/components/schemas/BranchResource"
          }
        }
      },
      "LicenseProfileCollectionActions": {
        "type": "object",
        "properties": {
          "create": {
            "type": "boolean"
          }
        }
      },
      "LicenseProfileIndexRestResponse": {
        "type": "object",
        "properties": {
          "licenseProfiles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LicenseProfileResource"
            }
          },
          "actions": {
            "$ref": "#/components/schemas/LicenseProfileCollectionActions"
          }
        }
      },
      "LicenseProfileDetailsResource": {
        "type": "object",
        "properties": {
          "profile": {
            "$ref": "#/components/schemas/LicenseProfileResource"
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LicenseProfileCategoryResource"
            }
          },
          "licenses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LicensePolicyLicenseResource"
            }
          }
        }
      },
      "AssignableProjectResource": {
        "type": "object",
        "properties": {
          "projectKey": {
            "type": "string"
          },
          "projectName": {
            "type": "string"
          },
          "assignedToLicenseProfile": {
            "type": "boolean"
          }
        }
      },
      "AssignableProjectsIndexRestResponse": {
        "type": "object",
        "properties": {
          "assignableProjects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssignableProjectResource"
            }
          },
          "page": {
            "$ref": "#/components/schemas/PageRestResponse"
          }
        }
      },
      "IssueReleaseResource": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "severity": {
            "type": "string"
          },
          "originalSeverity": {
            "type": "string"
          },
          "manualSeverity": {
            "type": "string"
          },
          "showIncreasedSeverityWarning": {
            "type": "boolean"
          },
          "release": {
            "$ref": "#/components/schemas/ReleaseSearchResource"
          },
          "type": {
            "type": "string",
            "enum": ["VULNERABILITY", "PROHIBITED_LICENSE"]
          },
          "quality": {
            "type": "string",
            "enum": ["MAINTAINABILITY", "RELIABILITY", "SECURITY"]
          },
          "status": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "assignee": {
            "$ref": "#/components/schemas/UserResource"
          },
          "commentCount": {
            "type": "integer",
            "format": "int32"
          },
          "vulnerabilityId": {
            "type": "string"
          },
          "cweIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cvssScore": {
            "type": "string"
          },
          "withdrawn": {
            "type": "boolean"
          },
          "spdxLicenseId": {
            "type": "string"
          },
          "transitions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["CONFIRM", "REOPEN", "SAFE", "FIXED", "ACCEPT"]
            }
          },
          "actions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["COMMENT", "ASSIGN", "SET_SEVERITY"]
            },
            "uniqueItems": true
          }
        }
      },
      "IssuesReleasesSearchRestResponse": {
        "type": "object",
        "properties": {
          "issuesReleases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IssueReleaseResource"
            }
          },
          "branches": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BranchResource"
            }
          },
          "countWithoutFilters": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "$ref": "#/components/schemas/PageRestResponse"
          }
        }
      },
      "IssueReleaseChangeDiffResource": {
        "type": "object",
        "properties": {
          "fieldName": {
            "type": "string"
          },
          "oldValue": {
            "type": "string"
          },
          "newValue": {
            "type": "string"
          }
        }
      },
      "IssueReleaseChangeResource": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/UserResource"
          },
          "markdownComment": {
            "type": "string"
          },
          "htmlComment": {
            "type": "string"
          },
          "changeData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IssueReleaseChangeDiffResource"
            }
          },
          "actions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["EDIT_COMMENT", "DELETE_COMMENT"]
            },
            "uniqueItems": true
          }
        }
      },
      "IssuesReleasesChangesRestResponse": {
        "type": "object",
        "properties": {
          "changelog": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IssueReleaseChangeResource"
            }
          }
        }
      },
      "ScaFeatureEnabledResource": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean"
          }
        }
      },
      "ScaCliInfoRestResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "sha256": {
            "type": "string"
          },
          "os": {
            "type": "string"
          },
          "arch": {
            "type": "string"
          }
        }
      },
      "AnalysisErrorResource": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "UNKNOWN",
              "NO_DEPENDENCIES_FOUND",
              "DEPENDENCY_FILES_PARSE_ERROR",
              "UNSUPPORTED_PLATFORM",
              "INEXACT_VERSIONS",
              "MISSING_LOCKFILE"
            ]
          },
          "path": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "AnalysisResource": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["FAILED", "OUTDATED", "COMPLETED"]
          },
          "failedReason": {
            "type": "string"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnalysisErrorResource"
            }
          },
          "parsedFiles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SupportedRulesDto": {
        "type": "object",
        "properties": {
          "rules": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true
          }
        }
      },
      "LlmModelDto": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "recommended": {
            "type": "boolean"
          }
        }
      },
      "LlmProviderResponseDto": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "selfHosted": {
            "type": "boolean"
          },
          "models": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LlmModelDto"
            }
          }
        }
      },
      "ServiceInfo": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "CONNECTION_ERROR",
              "SERVICE_ERROR",
              "SUCCESS",
              "TIMEOUT",
              "UNAUTHORIZED"
            ]
          }
        }
      },
      "FixSuggestionIssueResponse": {
        "type": "object",
        "properties": {
          "issueId": {
            "type": "string"
          },
          "aiSuggestion": {
            "type": "string",
            "enum": [
              "AVAILABLE",
              "NOT_AVAILABLE_FILE_LEVEL_ISSUE",
              "NOT_AVAILABLE_UNSUPPORTED_RULE",
              "NOT_AVAILABLE_FILE_SIZE"
            ]
          }
        }
      },
      "FeatureEnablementResponse": {
        "type": "object",
        "properties": {
          "enablement": {
            "type": "string",
            "enum": [
              "DISABLED",
              "ENABLED_FOR_ALL_PROJECTS",
              "ENABLED_FOR_SOME_PROJECTS"
            ]
          },
          "enabledProjectKeys": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true
          },
          "provider": {
            "$ref": "#/components/schemas/ProviderResponseDto"
          }
        }
      },
      "ProviderResponseDto": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "modelKey": {
            "type": "string"
          },
          "endpoint": {
            "type": "string"
          }
        }
      },
      "PurchasableFeatureRestResponse": {
        "type": "object",
        "properties": {
          "featureKey": {
            "type": "string"
          },
          "isEnabled": {
            "type": "boolean"
          },
          "isAvailable": {
            "type": "boolean"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "LicenseFeatureRestResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "startDate": {
            "type": "string"
          },
          "endDate": {
            "type": "string"
          }
        }
      },
      "LicenseRestResponse": {
        "type": "object",
        "properties": {
          "expirationDate": {
            "type": "string"
          },
          "lastRefreshDate": {
            "type": "string"
          },
          "edition": {
            "type": "string"
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LicenseFeatureRestResponse"
            }
          },
          "maxLoc": {
            "type": "integer",
            "format": "int64"
          },
          "loc": {
            "type": "integer",
            "format": "int64"
          },
          "serverId": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "contactEmail": {
            "type": "string"
          },
          "remainingLocThreshold": {
            "type": "integer",
            "format": "int64"
          },
          "canActivateGracePeriod": {
            "type": "boolean"
          },
          "gracePeriodEndDate": {
            "type": "string"
          },
          "gracePeriodExpired": {
            "type": "boolean"
          },
          "extraDays": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string"
          },
          "activatedOnline": {
            "type": "boolean"
          },
          "licenseKey": {
            "type": "string"
          },
          "expired": {
            "type": "boolean"
          },
          "legacy": {
            "type": "boolean"
          },
          "validEdition": {
            "type": "boolean"
          },
          "validServerId": {
            "type": "boolean"
          },
          "officialDistribution": {
            "type": "boolean"
          },
          "supported": {
            "type": "boolean"
          },
          "disabled": {
            "type": "boolean"
          }
        }
      },
      "ProjectBinding": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "devOpsPlatformSettingId": {
            "type": "string"
          },
          "projectId": {
            "type": "string"
          },
          "projectKey": {
            "type": "string"
          },
          "repository": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          }
        },
        "required": ["devOpsPlatformSettingId", "id", "projectId", "projectKey"]
      },
      "ProjectBindingsSearchRestResponse": {
        "type": "object",
        "properties": {
          "projectBindings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectBinding"
            }
          },
          "page": {
            "$ref": "#/components/schemas/PageRestResponse"
          }
        }
      },
      "PermissionMappingsSearchRestResponse": {
        "type": "object",
        "properties": {
          "permissionMappings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionMappingsResource"
            }
          }
        }
      },
      "GitlabConfigurationSearchRestResponse": {
        "type": "object",
        "properties": {
          "gitlabConfigurations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitlabConfigurationResource"
            }
          },
          "page": {
            "$ref": "#/components/schemas/PageRestResponse"
          }
        }
      },
      "GithubConfigurationSearchRestResponse": {
        "type": "object",
        "properties": {
          "githubConfigurations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GithubConfigurationResource"
            }
          },
          "page": {
            "$ref": "#/components/schemas/PageRestResponse"
          }
        }
      },
      "DopSettingsResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "description": "Supported DevOps Platform are: github, gitlab, azure, bitbucketcloud, bitbucket_server"
          },
          "key": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "appId": {
            "type": "string"
          }
        }
      },
      "DopSettingsRestResponse": {
        "type": "object",
        "properties": {
          "dopSettings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DopSettingsResource"
            }
          },
          "page": {
            "$ref": "#/components/schemas/PageRestResponse"
          }
        }
      },
      "GroupsSearchRestResponse": {
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupRestResponse"
            }
          },
          "page": {
            "$ref": "#/components/schemas/PageRestResponse"
          }
        }
      },
      "GroupsMembershipSearchRestResponse": {
        "type": "object",
        "properties": {
          "groupMemberships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupMembershipRestResponse"
            }
          },
          "page": {
            "$ref": "#/components/schemas/PageRestResponse"
          }
        }
      },
      "_C": {
        "type": "object",
        "properties": {
          "graphs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_e"
            }
          }
        }
      },
      "_e": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "branchId": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["file_graph", "namespace_graph"]
          },
          "ecosystem": {
            "type": "string",
            "enum": ["java", "js", "ts", "py", "cs", "xoo"]
          },
          "perspectiveKey": {
            "type": "string"
          },
          "graphVersion": {
            "type": "string"
          }
        }
      },
      "JreInfoRestResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          },
          "sha256": {
            "type": "string"
          },
          "javaPath": {
            "type": "string"
          },
          "os": {
            "type": "string"
          },
          "arch": {
            "type": "string"
          }
        }
      },
      "EngineInfoRestResponse": {
        "type": "object",
        "properties": {
          "filename": {
            "type": "string"
          },
          "sha256": {
            "type": "string"
          }
        }
      },
      "ActiveRule": {
        "type": "object",
        "properties": {
          "ruleKey": {
            "$ref": "#/components/schemas/RuleKey"
          },
          "name": {
            "type": "string"
          },
          "severity": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "internalKey": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "templateRuleKey": {
            "type": "string"
          },
          "qProfileKey": {
            "type": "string"
          },
          "deprecatedKeys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuleKey"
            }
          },
          "params": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Param"
            }
          },
          "impacts": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "enum": ["INFO", "LOW", "MEDIUM", "HIGH", "BLOCKER"]
            }
          }
        }
      },
      "Param": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "RuleKey": {
        "type": "object",
        "properties": {
          "repository": {
            "type": "string"
          },
          "rule": {
            "type": "string"
          }
        }
      }
    }
  }
}
